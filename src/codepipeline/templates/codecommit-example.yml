# codepipeline/templates/codecommit-example.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Simple CodeCommit pipeline

Parameters:
  ApplicationName:
    Type: String
    Description: CodeDeploy application name
    Default: MyDemoApplication

  DeploymentGroupName:
    Type: String
    Description: Deployment group name
    Default: MyDemoDeploymentGroup

  RepositoryName:
    Type: String
    Description: CodeCommit repository name
    Default: MyDemoRepo

  DeploymentBranch:
    Type: String
    Description: Branch for deployment
    Default: main

  PipelineName:
    Type: String
    Description: CodePipeline pipeline name
    Default: MyFirstPipeline

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

  PublicKeyBody:
    Type: String
    Description: EC2 public key
    AllowedPattern: ssh-rsa .*

  IngressCidr:
    Type: String
    Description: IP address for ingress
    Default: 0.0.0.0/0
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  Ec2InstanceName:
    Type: String
    Description: Name for the EC2 instance
    Default: MyCodePipelineDemo

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-artifactbucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ExecutePipelineFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-ExecutePipelineFunctionPolicy-${AWS::Region}
      Description: Lambda Function policy to execute pipeline
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:StartPipelineExecution
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}

  ExecutePipelineFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ExecutePipelineFunctionRole-${AWS::Region}
      Description: Lambda Function role to execute pipeline
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ExecutePipelineFunctionPolicy

  ExecutePipelineFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ExecutePipelineFunction

  ExecutePipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExecutePipelineFunction
      Description: Execute pipeline
      Role:
        Fn::GetAtt: ExecutePipelineFunctionRole.Arn
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Handler: index.handler
      LoggingConfig:
        LogGroup:
          Ref: ExecutePipelineFunctionLogGroup
      Environment:
        Variables:
          PIPELINE_NAME:
            Ref: PipelineName
      Code:
        ZipFile: |
          const {
            CodePipelineClient,
            StartPipelineExecutionCommand,
          } = require("@aws-sdk/client-codepipeline");

          exports.handler = async () => {
            const client = new CodePipelineClient({});
            const command = new StartPipelineExecutionCommand({
              name: process.env.PIPELINE_NAME,
            });
            const response = await client.send(command);
            console.log(`Pipeline started: (${response.pipelineExecutionId})`);
          };

  ExecutePipelineFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ExecutePipelineFunction
      Principal:
        Fn::Sub: sns.${AWS::URLSuffix}
      SourceArn:
        Ref: UpdateReferenceTopic

  UpdateReferenceTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: false
      Subscription:
        - Protocol: lambda
          Endpoint:
            Fn::GetAtt: ExecutePipelineFunction.Arn

  DemoRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: My demo repository
      RepositoryName:
        Ref: RepositoryName
      Triggers:
        - Name: UpdateReferenceTrigger
          DestinationArn:
            Ref: UpdateReferenceTopic
          Branches:
            - Ref: DeploymentBranch
          Events:
            - updateReference

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CodeDeployRole-${AWS::Region}
      Description: Service role for AWS CodeDeploy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: codedeploy.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName:
        Ref: ApplicationName
      ComputePlatform: Server

  CodeDeployAgentAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: InstallCodeDeployAgent
      Name: AWS-ConfigureAWSPackage
      Parameters:
        action:
          - Install
        name:
          - AWSCodeDeployAgent
      ScheduleExpression: cron(0 2 ? * SUN *)
      Targets:
        - Key: tag:Name
          Values:
            - Ref: Ec2InstanceName

  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: CodeDeployApplication
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName:
        Ref: DeploymentGroupName
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: Name
          Value:
            Ref: Ec2InstanceName
          Type: KEY_AND_VALUE
      ServiceRoleArn:
        Fn::GetAtt: CodeDeployRole.Arn

  CodePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-CodePipelinePolicy-${AWS::Region}
      Description: Execution policy for CodePipeline
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ArtifactBucketPermissions
            Effect: Allow
            Action:
              - s3:List*
              - s3:Get*
            Resource:
              - Fn::GetAtt: ArtifactBucket.Arn
          - Sid: ArtifactObjectsPermissions
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - Fn::Sub: ${ArtifactBucket.Arn}/${PipelineName}/*
          - Sid: CodeCommitPermissions
            Effect: Allow
            Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource:
              - Fn::GetAtt: DemoRepository.Arn
          - Sid: CodeDeployPermissions
            Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Service role for CodePipeline
      RoleName:
        Fn::Sub: ${AWS::StackName}-CodePipelineRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: codepipeline.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: CodePipelinePolicy

  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: ArtifactBucket
        Type: S3
      Name:
        Ref: PipelineName
      RoleArn:
        Fn::GetAtt: CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName:
                  Ref: RepositoryName
                BranchName:
                  Ref: DeploymentBranch
                PollForSourceChanges: false
              InputArtifacts: []
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName:
                  Ref: ApplicationName
                DeploymentGroupName:
                  Ref: MyDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts: []

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Sub: ${AWS::StackName}-keypair
      PublicKeyMaterial:
        Ref: PublicKeyBody

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Security group for ${AWS::StackName} stack
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: IngressCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: IngressCidr

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Service role for EC2 instance
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ec2.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: MyKeyPair
      SecurityGroups:
        - Ref: MySecurityGroup
      Tags:
        - Key: Name
          Value:
            Ref: Ec2InstanceName
      IamInstanceProfile:
        Ref: EC2InstanceProfile

Outputs:
  CloneUrlHttp:
    Value:
      Fn::GetAtt: DemoRepository.CloneUrlHttp

  CloneUrlSsh:
    Value:
      Fn::GetAtt: DemoRepository.CloneUrlSsh
