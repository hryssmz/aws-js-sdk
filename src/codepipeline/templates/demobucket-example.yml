# codepipeline/templates/demobucket-example.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Simple S3 bucket pipeline

Parameters:
  ApplicationName:
    Type: String
    Description: CodeDeploy application name
    Default: MyDemoApplication

  DeploymentGroupName:
    Type: String
    Description: Deployment group name
    Default: MyDemoDeploymentGroup

  DeploymentGroupName2:
    Type: String
    Description: The second group name. When specified, the deployment fails
    Default: ""
    # Default: CodePipelineProductionFleet

  S3SourceKey:
    Type: String
    Description: Object key for app bundle
    Default: SampleApp_Linux.zip

  PipelineName:
    Type: String
    Description: CodePipeline pipeline name
    Default: MyFirstPipeline

  SourceChangeDetection:
    Type: String
    Description: Detect the changes for source
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
    ConstraintDescription: must be either "true" or "false"

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

  PublicKeyBody:
    Type: String
    Description: EC2 public key
    AllowedPattern: ssh-rsa .*

  IngressCidr:
    Type: String
    Description: IP address for ingress
    Default: 0.0.0.0/0
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  Ec2InstanceName:
    Type: String
    Description: Name for the EC2 instance
    Default: MyCodePipelineDemo

Conditions:
  CreateSecondDeploymentGroupCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: DeploymentGroupName2
          - ""

  SourceChangeDetectionCondition:
    Fn::Equals:
      - Ref: SourceChangeDetection
      - "true"

Mappings:
  ImageIdMapping:
    ap-northeast-1:
      Linux: ami-030cf0a1edb8636ab
      Windows: ami-0500753a8b9c3c925

Resources:
  DemoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-demobucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  DemoBucketTrailPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: SourceChangeDetectionCondition
    Properties:
      Bucket:
        Ref: DemoBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              Fn::GetAtt: DemoBucket.Arn
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: ${DemoBucket.Arn}/*

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CodeDeployRole-${AWS::Region}
      Description: Service role for AWS CodeDeploy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName:
        Ref: ApplicationName
      ComputePlatform: Server

  CodeDeployAgentAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: InstallCodeDeployAgent
      Name: AWS-ConfigureAWSPackage
      Parameters:
        action:
          - Install
        name:
          - AWSCodeDeployAgent
      ScheduleExpression: cron(0 2 ? * SUN *)
      Targets:
        - Key: tag:Name
          Values:
            - Ref: Ec2InstanceName

  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: CodeDeployApplication
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName:
        Ref: DeploymentGroupName
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: Name
          Value:
            Ref: Ec2InstanceName
          Type: KEY_AND_VALUE
      ServiceRoleArn:
        Fn::GetAtt: CodeDeployRole.Arn

  SecondDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Condition: CreateSecondDeploymentGroupCondition
    Properties:
      ApplicationName:
        Ref: CodeDeployApplication
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName:
        Ref: DeploymentGroupName2
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: Name
          Value:
            Ref: Ec2InstanceName
          Type: KEY_AND_VALUE
      ServiceRoleArn:
        Fn::GetAtt: CodeDeployRole.Arn

  CodePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-CodePipelinePolicy-${AWS::Region}
      Description: Execution policy for CodePipeline
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ArtifactBucketPermissions
            Effect: Allow
            Action:
              - s3:List*
              - s3:Get*
            Resource:
              - Fn::GetAtt: DemoBucket.Arn
          - Sid: ArtifactObjectsPermissions
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - Fn::Sub: ${DemoBucket.Arn}/${PipelineName}/*
          - Sid: S3SourceObjectPermissions
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - Fn::Sub: ${DemoBucket.Arn}/${S3SourceKey}
          - Sid: CodeDeployPermissions
            Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CodePipelineRole-${AWS::Region}
      Description: Service role for CodePipeline
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: CodePipelinePolicy

  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: DemoBucket
        Type: S3
      Name:
        Ref: PipelineName
      RoleArn:
        Fn::GetAtt: CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: S3SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket:
                  Ref: DemoBucket
                S3ObjectKey:
                  Ref: S3SourceKey
                PollForSourceChanges: false
              InputArtifacts: []
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name:
                Fn::Sub: Deploy${ApplicationName}
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName:
                  Ref: ApplicationName
                DeploymentGroupName:
                  Ref: MyDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts: []
        - Fn::If:
            - CreateSecondDeploymentGroupCondition
            - Name: Production
              Actions:
                - Name:
                    Fn::Sub: Deploy${ApplicationName}2
                  RunOrder: 1
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CodeDeploy
                    Version: 1
                  Configuration:
                    ApplicationName:
                      Ref: ApplicationName
                    DeploymentGroupName:
                      Ref: SecondDeploymentGroup
                  InputArtifacts:
                    - Name: SourceOutput
                  OutputArtifacts: []
            - Ref: AWS::NoValue

  CloudWatchEventPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: SourceChangeDetectionCondition
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-CloudWatchEventPolicy-${AWS::Region}
      Description: Execution policy for CloudWatch Event
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:StartPipelineExecution
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Condition: SourceChangeDetectionCondition
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CloudWatchEventRole-${AWS::Region}
      Description: Service role for CloudWatch Event
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: CloudWatchEventPolicy

  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Condition: SourceChangeDetectionCondition
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - Ref: DemoBucket
            key:
              - Ref: S3SourceKey
      Targets:
        - Id:
            Fn::Sub: codepipeline-${PipelineName}
          Arn:
            Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}
          RoleArn:
            Fn::GetAtt: CloudWatchEventRole.Arn

  MyTrail:
    Type: AWS::CloudTrail::Trail
    Condition: SourceChangeDetectionCondition
    DependsOn:
      - DemoBucketTrailPolicy
    Properties:
      S3BucketName:
        Ref: DemoBucket
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - Fn::Sub: ${DemoBucket.Arn}/${S3SourceKey}
          ReadWriteType: WriteOnly
          IncludeManagementEvents: false
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Sub: ${AWS::StackName}-keypair
      PublicKeyMaterial:
        Ref: PublicKeyBody

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Security group for ${AWS::StackName} stack
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: IngressCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: IngressCidr

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: MyKeyPair
      SecurityGroups:
        - Ref: MySecurityGroup
      Tags:
        - Key: Name
          Value:
            Ref: Ec2InstanceName
      IamInstanceProfile:
        Ref: EC2InstanceProfile

Outputs:
  DemoBucketName:
    Value:
      Ref: DemoBucket
