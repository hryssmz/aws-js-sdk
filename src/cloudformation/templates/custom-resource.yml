# cloudformation/templates/custom-resource.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Create custom resource

Parameters:
  Architecture:
    Type: String
    Description: AMI architecture
    Default: PV64
    AllowedValues:
      - HVM64
      - PV64
    ConstraintDescription: Must be either 'HVM64' or 'PV64'

Resources:
  # Lambda
  AmiLookupFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-AmiLookupFunctionPolicy-${AWS::Region}
      Description: Policy for AmiLookupFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: EC2AccessPermissions
            Effect: Allow
            Action:
              - ec2:DescribeImages
            Resource: "*"

  AmiLookupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-AmiLookupFunctionRole-${AWS::Region}
      Description: Service role for AmiLookupFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: AmiLookupFunctionPolicy

  AmiLookupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-AmiLookupFunction

  AmiLookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-AmiLookupFunction
      Description: AMI lookup function
      Role:
        Fn::GetAtt: AmiLookupFunctionRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Timeout: 30
      LoggingConfig:
        LogGroup:
          Ref: AmiLookupFunctionLogGroup
      InlineCode:
        Fn::Join:
          - "\n"
          - - Fn::Sub: |
                /* Sample Create Event
                {
                  "RequestType": "Create",
                  "RequestId": "00000000-0000-0000-0000-000000000000",
                  "ResponseURL": "https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}",
                  "ResourceType": "Custom::AMIInfo",
                  "LogicalResourceId": "AMIInfo",
                  "StackId": "${AWS::StackId}",
                  "ResourceProperties": {
                    "Architecture": "HVM64",
                    "Region": "${AWS::Region}"
                  }
                }
                */

                /* Sample Update Event
                {
                  "RequestType": "Update",
                  "RequestId": "00000000-0000-0000-0000-000000000010",
                  "ResponseURL": "https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}",
                  "ResourceType": "Custom::AMIInfo",
                  "LogicalResourceId": "AMIInfo",
                  "StackId": "${AWS::StackId}",
                  "PhysicalResourceId": "2020/01/01/[$LATEST]0123456789abcdef0123456789abcdef",
                  "ResourceProperties": {
                    "Architecture": "PV64",
                    "Region": "${AWS::Region}"
                  },
                  "OldResourceProperties": {
                    "Architecture": "HVM64",
                    "Region": "${AWS::Region}"
                  }
                }
                */

                /* Sample Delete Event
                {
                  "RequestType": "Delete",
                  "RequestId": "00000000-0000-0000-0000-000000000020",
                  "ResponseURL": "https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}",
                  "ResourceType": "Custom::AMIInfo",
                  "LogicalResourceId": "AMIInfo",
                  "StackId": "${AWS::StackId}",
                  "PhysicalResourceId": "2020/01/01/[$LATEST]0123456789abcdef0123456789abcdef",
                  "ResourceProperties": {
                    "Architecture": "PV64",
                    "Region": "${AWS::Region}"
                  }
                }
                */
            - |
              const https = require("https");
              const url = require("url");
              const { DescribeImagesCommand, EC2Client } = require("@aws-sdk/client-ec2");

              const serialize = obj => JSON.stringify(obj, null, 2);

              const sendResponse = async (event, context, status, data) => {
                const { StackId, RequestId, LogicalResourceId, ResponseURL } = event;
                const body = serialize({
                  Status: status,
                  Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
                  PhysicalResourceId: context.logStreamName,
                  Data: data,
                  StackId,
                  RequestId,
                  LogicalResourceId,
                });
                console.log(`RESPONSE BODY: ${body}`);

                const { hostname, path } = url.parse(ResponseURL);
                const headers = {
                  "Content-Type": "application/json",
                  "Content-Length": body.length,
                };
                console.log("SENDING RESPONSE...");

                return await new Promise((resolve, reject) => {
                  const req = https.request(
                    { hostname, port: 443, path, method: "PUT", headers },
                    res => {
                      console.log(`STATUS: ${res.statusCode}`);
                      console.log(`HEADERS: ${serialize(res.headers)}`);
                      res.on("data", chunk => {
                        const body = JSON.parse(chunk.toString());
                        console.log(`BODY: ${serialize(body)}`);
                        resolve(body);
                      });
                    }
                  );
                  req.on("error", e => {
                    console.log(`problem with request: ${e.message}`);
                    reject(e.message);
                  });
                  req.write(body);
                  req.end();
                });
              };

              const isBeta = imageName =>
                imageName.toLowerCase().indexOf("beta") > -1 ||
                imageName.toLowerCase().indexOf(".rc") > -1;

              exports.handler = async (event, context) => {
                console.log(`REQUEST RECEIVED: ${serialize(event)}`);
                const { ResourceProperties } = event;
                const { Region, Architecture } = ResourceProperties;

                if (event.RequestType == "Delete") {
                  return await sendResponse(event, context, "SUCCESS");
                }
                const archToAMINamePattern = {
                  PV64: "amzn-ami-pv*x86_64-ebs",
                  HVM64: "amzn-ami-hvm*x86_64-gp2",
                };
                const client = new EC2Client({ region: Region });
                const command = new DescribeImagesCommand({
                  Filters: [
                    {
                      Name: "name",
                      Values: [archToAMINamePattern[Architecture]],
                    },
                  ],
                  Owners: ["amazon"],
                });

                return await client
                  .send(command)
                  .then(async ({ Images }) => {
                    const latestImage = Images.sort((x, y) =>
                      y.Name.localeCompare(x.Name)
                    ).find(image => !isBeta(image.Name));
                    if (latestImage !== undefined) {
                      return await sendResponse(event, context, "SUCCESS", {
                        Id: latestImage.ImageId,
                      });
                    } else {
                      return await sendResponse(event, context, "FAILED");
                    }
                  })
                  .catch(async err => {
                    const message = "DescribeImages call failed";
                    console.log(`${message}: ${err}`);
                    return await sendResponse(event, context, "FAILED", { Error: message });
                  });
              };

  # REST API
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            put:
              operationId: PutRoot
              tags:
                - Root
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/PutRootRequest"
                    examples:
                      example1:
                        value:
                          Status: SUCCESS
                          RequestId: 00000000-0000-0000-0000-000000000000
                          LogicalResourceId: AMIInfo
                          StackId: arn:aws:cloudformation:ap-northeast-1:123456789012:stack/asg-arn/12345678-0000-0000-0000-000000000000
                          PhysicalResourceId: 2020/01/01/[$LATEST]0123456789abcdef0123456789abcdef
                          Data:
                            Id: ami-12345678
                      example2:
                        value:
                          Status: FAILED
                          Reason: Required failure reason string
                          RequestId: 00000000-0000-0000-0000-000000000010
                          LogicalResourceId: AMIInfo
                          StackId: arn:aws:cloudformation:ap-northeast-1:123456789012:stack/asg-arn/12345678-0000-0000-0000-000000000000
                          PhysicalResourceId: 2020/01/01/[$LATEST]0123456789abcdef0123456789abcdef
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/PutRootResponse"
                      examples:
                        example1:
                          value:
                            message: Hello World!
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: "#/components/headers/Access-Control-Allow-Origin"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutRootFunction.Arn}/invocations
                httpMethod: POST
        components:
          schemas:
            PutRootRequest:
              description: Request body for PUT /
              type: object
              required:
                - Status
                - PhysicalResourceId
                - StackId
                - RequestId
                - LogicalResourceId
              properties:
                Status:
                  type: string
                  enum:
                    - SUCCESS
                    - FAILED
                  description: |
                    The status value sent by the custom resource provider in response to an AWS CloudFormation-generated request.

                    Must be either `SUCCESS` or `FAILED`.

                    _Required_: Yes

                    _Type_: String
                Reason:
                  type: string
                  description: |
                    Describes the reason for a failure response.

                    _Required_: Required if `Status` is `FAILED`. It's optional otherwise.

                    _Type_: String
                PhysicalResourceId:
                  type: string
                  description: |
                    This value should be an identifier unique to the custom resource vendor, and can be up to 1 KB in size. The value must be a non-empty string and must be identical for all responses for the same resource.

                    The value returned for a `PhysicalResourceId` can change custom resource update operations. If the value returned is the same, it is considered a normal update. If the value returned is different, AWS CloudFormation recognizes the update as a replacement and sends a delete request to the old resource. For more information, see [AWS::CloudFormation::CustomResource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html).

                    _Required_: Yes

                    _Type_: String
                StackId:
                  type: string
                  description: |
                    The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. This response value should be copied _verbatim_ from the request.

                    _Required_: Yes

                    _Type_: String
                RequestId:
                  type: string
                  description: |
                    A unique ID for the request. This response value should be copied _verbatim_ from the request.

                    _Required_: Yes

                    _Type_: String
                LogicalResourceId:
                  type: string
                  description: |
                    The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This response value should be copied _verbatim_ from the request.

                    _Required_: Yes

                    _Type_: String
                NoEcho:
                  type: boolean
                  default: false
                  description: |
                    Optional. Indicates whether to mask the output of the custom resource when retrieved by using the `Fn::GetAtt` function. If set to `true`, all returned values are masked with asterisks (`*****`), _except for those stored in the `Metadata` section of the template_. AWS CloudFormation does not transform, modify, or redact any information you include in the `Metadata` section. The default value is `false`.

                    For more information about using `NoEcho` to mask sensitive information, see the [Do not embed credentials in your templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#creds) best practice.

                    _Required_: No

                    _Type_: Boolean
                Data:
                  type: object
                  description: |
                    Optional. The custom resource provider-defined name-value pairs to send with the response. You can access the values provided here by name in the template with `Fn::GetAtt`.

                    > **Important**
                    >
                    > If the name-value pairs contain sensitive information, you should use the `NoEcho` field to mask the output of the custom resource. Otherwise, the values are visible through APIs that surface property values (such as `DescribeStackEvents`).

                    _Required_: No

                    _Type_: JSON object
            PutRootResponse:
              description: Response body for PUT /
              type: object
              required:
                - message
              properties:
                message:
                  type: string
          headers:
            Access-Control-Allow-Origin:
              description: Response header for CORS support
              schema:
                type: string
                example: "*"

  PutRootFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-PutRootFunctionRole-${AWS::Region}
      Description: Service role for PutRootFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  PutRootFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-PutRootFunction

  PutRootFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PutRootFunction
      Description: PutRoot function
      Role:
        Fn::GetAtt: PutRootFunctionRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: PUT
            Path: /
            RestApiId:
              Ref: RestApi
      LoggingConfig:
        LogGroup:
          Ref: PutRootFunctionLogGroup
      InlineCode: |
        exports.handler = async event => {
          console.log(`Event:\n${JSON.stringify(event)}`);
          return {
            statusCode: 200,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: JSON.stringify({ message: "Hello World!" }),
          };
        };

  # Custom
  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken:
        Fn::GetAtt: AmiLookupFunction.Arn
      Region:
        Ref: AWS::Region
      Architecture:
        Ref: Architecture

Outputs:
  ImageId:
    Description: The Amazon EC2 instance AMI ID
    Value:
      Fn::GetAtt: AMIInfo.Id
