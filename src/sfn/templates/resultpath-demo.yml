# sfn/templates/resultpath-demo.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: ResultPath demo

Resources:
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionExecutionRole-${AWS::Region}
      Description: Execution role for Lambda Function
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HelloFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-HelloFunction

  HelloFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HelloFunction
      Description: Lambda function returns a greeting message
      Role:
        Fn::GetAtt: LambdaFunctionExecutionRole.Arn
      Handler: index.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      LoggingConfig:
        LogGroup:
          Ref: HelloFunctionLogGroup
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            callback(null, "Hello from " + event.who + "!");
          };

  FailFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            function CustomError(message) {
              this.name = "CustomError";
              this.message = message;
            }
            CustomError.prototype = new Error();

            throw new CustomError("This is a custom error!");
          };
      Description: Lambda function returns a custom error
      Handler: index.handler
      Role:
        Fn::GetAtt: LambdaFunctionExecutionRole.Arn
      Runtime: nodejs14.x

  StateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-StateMachineExecutionPolicy-${AWS::Region}
      Description: Execution policy for State Machine
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - "*"

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-StateMachineExecutionRole-${AWS::Region}
      Description: Execution role for State Machine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: states.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: StateMachineExecutionPolicy

  LambdaStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      Definition:
        Comment: A state machine that uses Lambda
        StartAt: CallFunction
        States:
          CallFunction:
            Type: Task
            Resource:
              Fn::GetAtt: HelloFunction.Arn
            End: true
            ResultPath: "$"
      RoleArn:
        Fn::GetAtt: StateMachineExecutionRole.Arn
      StateMachineType: STANDARD

  CatchFailureStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      Definition:
        Comment: A Catch example of the Amazon States Language using an AWS Lambda function
        StartAt: CreateAccount
        States:
          CreateAccount:
            Type: Task
            Resource:
              Fn::GetAtt: FailFunction.Arn
            Catch:
              - ErrorEquals:
                  - CustomError
                Next: CustomErrorFallback
                ResultPath: $.error
              - ErrorEquals:
                  - States.TaskFailed
                Next: ReservedTypeFallback
                ResultPath: $.error
              - ErrorEquals:
                  - States.ALL
                Next: CatchAllFallback
                ResultPath: $.error
            End: true
          CustomErrorFallback:
            Type: Pass
            Result: This is a fallback from a custom Lambda function exception
            End: true
          ReservedTypeFallback:
            Type: Pass
            Result: This is a fallback from a reserved error code
            End: true
          CatchAllFallback:
            Type: Pass
            Result: This is a fallback from any error code
            End: true
      RoleArn:
        Fn::GetAtt: StateMachineExecutionRole.Arn
      StateMachineType: STANDARD

Outputs:
  LambdaFunctionExecutionRoleArn:
    Value:
      Fn::GetAtt: LambdaFunctionExecutionRole.Arn

  HelloFunctionArn:
    Value:
      Fn::GetAtt: HelloFunction.Arn

  FailFunctionArn:
    Value:
      Fn::GetAtt: FailFunction.Arn

  StateMachineExecutionRoleArn:
    Value:
      Fn::GetAtt: StateMachineExecutionRole.Arn

  LambdaStateMachineArn:
    Value:
      Ref: LambdaStateMachine

  CatchFailureStateMachineArn:
    Value:
      Ref: CatchFailureStateMachine
