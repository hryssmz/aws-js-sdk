# lightsail/templates/lightsail-ssm.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Lightsail instances with SSM Agent

Parameters:
  LightsailInstanceName:
    Type: String
    Description: Lightsail instance name
    Default: LightsailInstance

  ActivationId:
    Type: String
    Description: Activation ID
    Default: ""

  ActivationCode:
    Type: String
    Description: Activation code
    Default: ""

Conditions:
  HasActivationIdCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: ActivationCode
          - ""

  CreateLightsailInstanceCondition:
    Fn::And:
      - Condition: HasActivationIdCondition
      - Fn::Not:
          - Fn::Equals:
              - Ref: ActivationCode
              - ""

Resources:
  # CloudWatch Logs
  ApacheAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lightsail/${AWS::StackName}-ApacheAccessLogGroup

  CloudWatchAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lightsail/${AWS::StackName}-CloudWatchAgentLogGroup

  HTTP4xxCountMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName:
        Fn::Sub: ${AWS::StackName}-HTTP4xxCountMetricFilter
      LogGroupName:
        Ref: ApacheAccessLogGroup
      FilterPattern: "[ip, id, user, timestamp, request, status_code=4*, size, referer, user_agent]"
      MetricTransformations:
        - MetricName: HTTP4xxCount
          MetricNamespace:
            Ref: AWS::StackName
          MetricValue: 1
          DefaultValue: 0

  # SSM
  CloudWatchAgentConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /AmazonCloudWatch-${AWS::StackName}/amazon-cloudwatch-agent.json
      Description: SSM Parameter for CloudWatchAgent configuration
      Type: String
      Value:
        Fn::Sub: |
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "log_group_name": "${CloudWatchAgentLogGroup}",
                      "log_stream_name": "{instance_id}-amazon-cloudwatch-agent.log"
                    },
                    {
                      "file_path": "/var/log/httpd/access_log",
                      "log_group_name": "${ApacheAccessLogGroup}",
                      "log_stream_name": "{instance_id}-access_log"
                    }
                  ]
                }
              },
              "log_stream_name": "default"
            }
          }

  # Lightsail
  LightsailInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LightsailInstanceRole-${AWS::Region}
      Description: Execution role for managed Lightsail instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ssm.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  LightsailInstanceUser:
    Type: AWS::IAM::User
    Properties:
      UserName:
        Fn::Sub: ${AWS::StackName}-LightsailInstanceUser
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess

  LightsailInstanceAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: LightsailInstanceUser
      Status: Active

  LightsailInstance:
    Type: AWS::Lightsail::Instance
    Condition: CreateLightsailInstanceCondition
    Properties:
      BlueprintId: amazon_linux_2023
      BundleId: nano_3_0
      InstanceName:
        Fn::Sub: ${AWS::StackName}-LightsailInstance
      UserData:
        Fn::Sub: |
          #!/bin/sh
          dnf update -y
          curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm
          dnf install -y /tmp/amazon-ssm-agent.rpm && rm -rf /tmp/amazon-ssm-agent.rpm
          amazon-ssm-agent -register -code ${ActivationCode} -id ${ActivationId} -region ${AWS::Region}
          systemctl restart amazon-ssm-agent

          dnf install -y amazon-cloudwatch-agent
          cat <<\EOF | aws configure --profile AmazonCloudWatchAgent
          ${LightsailInstanceAccessKey}
          ${LightsailInstanceAccessKey.SecretAccessKey}
          ${AWS::Region}
          json
          EOF
          cat <<\EOF > /opt/aws/amazon-cloudwatch-agent/etc/common-config.toml
          [credentials]
          shared_credential_profile = "AmazonCloudWatchAgent"
          EOF
          amazon-cloudwatch-agent-ctl -a fetch-config -m onPremise -s -c ssm:${CloudWatchAgentConfigParameter}

          dnf install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello World</h1>" > /var/www/html/index.html
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

Outputs:
  RegisterCommand:
    Description: Lightsail instance register command
    Value:
      Fn::Sub: aws ssm create-activation --default-instance-name ${LightsailInstanceName} --iam-role ${LightsailInstanceRole} --tags Key=Name,Value=${LightsailInstanceName}

  DeregisterCommand:
    Condition: HasActivationIdCondition
    Description: Lightsail instance deregister command
    Value:
      Fn::Sub: aws ssm deregister-managed-instance --instance-id `aws ssm describe-instance-information --filters Key=tag:Name,Values=${LightsailInstanceName} --query InstanceInformationList[0].InstanceId --output text`; aws ssm delete-activation --activation-id ${ActivationId}
