# rds/templates/postgresql-tutorial.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: LAMP server with RDS

Parameters:
  DBUser:
    Type: String
    Description: DB user
    Default: admin

  DBPassword:
    Type: String
    Description: DB password
    Default: password

  DBName:
    Type: String
    Description: DB name
    Default: sample

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

  PrivateSubnetCidrs:
    Type: CommaDelimitedList
    Description: Private subnet CIDRs
    Default: 172.31.128.0/20,172.31.144.0/20

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

Resources:
  # VPC
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Ref: PrivateSubnetCidrs
      VpcId:
        Ref: VpcId
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: PrivateSubnet0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Ref: PrivateSubnetCidrs
      VpcId:
        Ref: VpcId
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnet0PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet1PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  # EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-EC2SecurityGroup
      GroupDescription: Web security group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /var/www/inc/dbinfo.inc:
              content:
                Fn::Sub: |
                  <?php
                    define("DB_SERVER", "${DBInstance.Endpoint.Address}");
                    define("DB_USERNAME", "${DBUser}");
                    define("DB_PASSWORD", "${DBPassword}");
                    define("DB_DATABASE", "${DBName}");
                  ?>
              mode: "000644"
            /var/www/html/SamplePage.php:
              content: |
                <?php include "../inc/dbinfo.inc"; ?>
                <html>
                  <body>
                    <h1>Sample page</h1>
                    <?php
                      /* Connect to MySQL and select the database. */
                      $connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);

                      if (mysqli_connect_errno()) {
                        echo "Failed to connect to MySQL: " . mysqli_connect_error();
                      }

                      $database = mysqli_select_db($connection, DB_DATABASE);

                      /* Ensure that the EMPLOYEES table exists. */
                      VerifyEmployeesTable($connection, DB_DATABASE);

                      /* If input fields are populated, add a row to the EMPLOYEES table. */
                      $employee_name = htmlentities($_POST["NAME"]);
                      $employee_address = htmlentities($_POST["ADDRESS"]);

                      if (strlen($employee_name) || strlen($employee_address)) {
                        AddEmployee($connection, $employee_name, $employee_address);
                      }
                    ?>

                    <!-- Input form -->
                    <form action="<?PHP echo $_SERVER['SCRIPT_NAME'] ?>" method="POST">
                      <table border="0">
                        <tr>
                          <td>NAME</td>
                          <td>ADDRESS</td>
                        </tr>
                        <tr>
                          <td>
                            <input type="text" name="NAME" maxlength="45" size="30" />
                          </td>
                          <td>
                            <input type="text" name="ADDRESS" maxlength="90" size="60" />
                          </td>
                          <td>
                            <input type="submit" value="Add Data" />
                          </td>
                        </tr>
                      </table>
                    </form>

                    <!-- Display table data. -->
                    <table border="1" cellpadding="2" cellspacing="2">
                      <tr>
                        <td>ID</td>
                        <td>NAME</td>
                        <td>ADDRESS</td>
                      </tr>
                      <?php
                        $result = mysqli_query($connection, "SELECT * FROM EMPLOYEES");
                        while ($query_data = mysqli_fetch_row($result)) {
                          echo "<tr>";
                          echo "<td>", $query_data[0], "</td>",
                            "<td>", $query_data[1], "</td>",
                            "<td>", $query_data[2], "</td>";
                          echo "</tr>";
                        }
                      ?>
                    </table>

                    <!-- Clean up. -->
                    <?php
                      mysqli_free_result($result);
                      mysqli_close($connection);
                    ?>
                  </body>
                </html>

                <?php
                  /* Add an employee to the table. */
                  function AddEmployee($connection, $name, $address) {
                    $n = mysqli_real_escape_string($connection, $name);
                    $a = mysqli_real_escape_string($connection, $address);

                    $query = "INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('$n', '$a');";

                    if (!mysqli_query($connection, $query)) {
                      echo("<p>Error adding employee data.</p>");
                    }
                  }

                  /* Check whether the table exists and, if not, create it. */
                  function VerifyEmployeesTable($connection, $dbName) {
                    if (!TableExists("EMPLOYEES", $connection, $dbName)) {
                      $query = "CREATE TABLE EMPLOYEES (
                        ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                        NAME VARCHAR(45),
                        ADDRESS VARCHAR(90)
                      )";

                      if (!mysqli_query($connection, $query)) {
                        echo("<p>Error creating table.</p>");
                      }
                    }
                  }

                  /* Check for the existence of a table. */
                  function TableExists($tableName, $connection, $dbName) {
                    $t = mysqli_real_escape_string($connection, $tableName);
                    $d = mysqli_real_escape_string($connection, $dbName);

                    $query = "SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '$t' AND TABLE_SCHEMA = '$d'";
                    $checktable = mysqli_query($connection, $query);

                    if (mysqli_num_rows($checktable) > 0) {
                      return true;
                    }
                    return false;
                  }
                ?>
              mode: "000644"
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-EC2LaunchTemplate
      VersionDescription: Launch template for EC2 instances
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: EC2LaunchTemplate
      LaunchTemplateData:
        ImageId:
          Ref: ImageId
        InstanceType:
          Ref: InstanceType
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        SecurityGroupIds:
          - Ref: EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: EC2Instance
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              dnf update -y
              dnf install -y httpd php php-mysqli mariadb105
              systemctl start httpd
              systemctl enable httpd
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchTemplate --region ${AWS::Region}
              usermod -a -G apache ec2-user
              chown -R ec2-user:apache /var/www
              chmod 2775 /var/www
              find /var/www -type d -exec chmod 2775 {} \;
              find /var/www -type f -exec chmod 0664 {} \;

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: EC2LaunchTemplate
        Version:
          Fn::GetAtt: EC2LaunchTemplate.LatestVersionNumber

  # RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-DBSecurityGroup
      GroupDescription: DB security group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - Description: DB inbound rule
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: EC2SecurityGroup
      Tags:
        - Key: Name
          Value: DBSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName:
        Fn::Sub: ${AWS::StackName}-DBSubnetGroup
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - Ref: PrivateSubnet0
        - Ref: PrivateSubnet1

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBInstanceIdentifier:
        Fn::Sub: ${AWS::StackName}-DBInstance
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      Port: 3306
      DBName:
        Ref: DBName
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 20
      MaxAllocatedStorage: 100
      StorageEncrypted: true
      BackupRetentionPeriod: 0
      NetworkType: IPV4
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Ref: DBSecurityGroup

Outputs:
  DBHost:
    Description: DB instance host
    Value:
      Fn::GetAtt: DBInstance.Endpoint.Address

  DBPort:
    Description: DB instance port
    Value:
      Fn::GetAtt: DBInstance.Endpoint.Port
