# rds/templates/aurora-global-cluster.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Aurora PostgreSQL tutorial

Parameters:
  VPCCidr:
    Type: String
    Description: VPC CIDR
    Default: 172.20.0.0/16

  SubnetCidrs:
    Type: CommaDelimitedList
    Description: Subnet CIDRs
    Default: 172.20.0.0/20,172.20.16.0/20

  PrivateSubnetCidrs:
    Type: CommaDelimitedList
    Description: Private subnet CIDRs
    Default: 172.20.128.0/20,172.20.144.0/20

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

Rules:
  TestTokyoOrVirginia:
    Assertions:
      - AssertDescription: Only ap-northeast-1 and us-east-1 are allowed
        Assert:
          Fn::Contains:
            - - ap-northeast-1
              - us-east-1
            - Ref: AWS::Region

Conditions:
  IsTokyoCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - ap-northeast-1

  IsVerginiaCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - us-east-1

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Ref: SubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet0

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Ref: SubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet1

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: RouteTable

  Subnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet0
      RouteTableId:
        Ref: RouteTable

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Ref: PrivateSubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: PrivateSubnet0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Ref: PrivateSubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnet0PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet1PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  # EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-EC2SecurityGroup
      GroupDescription: EC2 security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /usr/local/bin/db-login.sh:
              content:
                Fn::Sub:
                  - |
                    #!/bin/sh
                    psql -d postgresql://postgres:postgres@${Host}:${Port}/$1
                  - Host:
                      Fn::If:
                        - IsTokyoCondition
                        - Fn::GetAtt: PrimaryCluster.Endpoint.Address
                        - Fn::GetAtt: SecondaryCluster.ReadEndpoint.Address
                    Port:
                      Fn::If:
                        - IsTokyoCondition
                        - Fn::GetAtt: PrimaryCluster.Endpoint.Port
                        - Fn::GetAtt: SecondaryCluster.Endpoint.Port
              mode: "000755"
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-EC2LaunchTemplate
      VersionDescription: Launch template for EC2 instances
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: EC2LaunchTemplate
      LaunchTemplateData:
        ImageId:
          Ref: ImageId
        InstanceType:
          Ref: InstanceType
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        SecurityGroupIds:
          - Ref: EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: EC2Instance
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              dnf update -y
              dnf install -y postgresql15
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchTemplate --region ${AWS::Region}

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: EC2LaunchTemplate
        Version:
          Fn::GetAtt: EC2LaunchTemplate.LatestVersionNumber
      SubnetId:
        Ref: Subnet0

  # RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-DBSecurityGroup
      GroupDescription: DB security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: DB inbound rule
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId:
            Ref: EC2SecurityGroup
      Tags:
        - Key: Name
          Value: DBSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName:
        Fn::Sub: ${AWS::StackName}-DBSubnetGroup
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - Ref: PrivateSubnet0
        - Ref: PrivateSubnet1

  GlobalCluster:
    Type: AWS::RDS::GlobalCluster
    Condition: IsTokyoCondition
    Properties:
      GlobalClusterIdentifier:
        Fn::Sub: ${AWS::StackName}-GlobalCluster
      Engine: aurora-postgresql
      EngineVersion: 15.2

  PrimaryCluster:
    Type: AWS::RDS::DBCluster
    Condition: IsTokyoCondition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBClusterIdentifier:
        Fn::Sub: ${AWS::StackName}-PrimaryCluster
      GlobalClusterIdentifier:
        Ref: GlobalCluster
      Engine: aurora-postgresql
      EngineVersion: 15.2
      MasterUsername: postgres
      MasterUserPassword: postgres
      Port: 5432
      DatabaseName: postgres
      StorageType: aurora
      StorageEncrypted: false
      NetworkType: IPV4
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
        - Ref: DBSecurityGroup

  PrimaryInstance:
    Type: AWS::RDS::DBInstance
    Condition: IsTokyoCondition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBClusterIdentifier:
        Ref: PrimaryCluster
      DBInstanceIdentifier:
        Fn::Sub: ${AWS::StackName}-PrimaryInstance
      Engine: aurora-postgresql
      DBInstanceClass: db.r5.large
      CACertificateIdentifier: rds-ca-rsa4096-g1

  SecondaryCluster:
    Type: AWS::RDS::DBCluster
    Condition: IsVerginiaCondition
    Properties:
      GlobalClusterIdentifier:
        Fn::Sub: ${AWS::StackName}-GlobalCluster
      Engine: aurora-postgresql
      EngineVersion: 15.2
      Port: 5432
      StorageType: aurora
      StorageEncrypted: false
      NetworkType: IPV4
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
        - Ref: DBSecurityGroup

  SecondaryInstance:
    Type: AWS::RDS::DBInstance
    Condition: IsVerginiaCondition
    Properties:
      DBClusterIdentifier:
        Ref: SecondaryCluster
      DBInstanceIdentifier:
        Fn::Sub: ${AWS::StackName}-SecondaryInstance
      Engine: aurora-postgresql
      DBInstanceClass: db.r5.large
      CACertificateIdentifier: rds-ca-rsa4096-g1
