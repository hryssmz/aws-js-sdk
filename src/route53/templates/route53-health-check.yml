# route53/templates/route53-health-check.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Route 53 health check

Rules:
  TestVirginia:
    Assertions:
      - AssertDescription: Only us-east-1 is allowed
        Assert:
          Fn::Equals:
            - us-east-1
            - Ref: AWS::Region

Resources:
  # REST API
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            get:
              responses:
                "200":
                  description: 200 OK
                "500":
                  description: 500 Internal Server Error
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  "2\\d{2}":
                    statusCode: 200
                    responseTemplates:
                      application/json: '{ "message": "OK" }'
                  default:
                    statusCode: 500
                    responseTemplates:
                      application/json: '{ "message": "Internal Server Error" }'
                passthroughBehavior: when_no_match

  # Route 53
  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        FullyQualifiedDomainName:
          Fn::Sub: ${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
        Port: 443
        ResourcePath:
          Fn::Sub: /${RestApi.Stage}
      HealthCheckTags:
        - Key: Name
          Value: HealthCheck

  # CloudWatch
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Sub: ${AWS::StackName}-HealthCheckAlarm
      AlarmDescription: Alarm for Route 53 health check
      Namespace: AWS/Route53
      MetricName: HealthCheckStatus
      Statistic: Minimum
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Period: 60
      Dimensions:
        - Name: HealthCheckId
          Value:
            Ref: HealthCheck
      AlarmActions:
        - Ref: HealthCheckAlarmTopic

  HealthCheckAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-HealthCheckAlarmTopic

  AlarmActionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-AlarmActionFunctionRole-${AWS::Region}
      Description: Service role for AlarmActionFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AlarmActionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-AlarmActionFunction

  AlarmActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-AlarmActionFunction
      Description: Alarm action function
      Role:
        Fn::GetAtt: AlarmActionFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: AlarmActionFunctionLogGroup
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: HealthCheckAlarmTopic
      InlineCode: |
        exports.handler = async event => {
          const { Records } = event;
          const records = Records.map(({ Sns }) => Sns).map(({ Message }) =>
            JSON.parse(Message)
          );
          records.forEach(record => {
            console.log(JSON.stringify(record, null, 2));
          });
          return records;
        };

Outputs:
  RestApiUrl:
    Description: REST API URL
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}
