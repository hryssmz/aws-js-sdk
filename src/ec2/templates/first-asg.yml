# ec2/templates/first-asg.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: My first auto scaling group

Parameters:
  Profile:
    Type: String
    Description: EC2 profile name
    Default: AL2013
    AllowedValues:
      - AL2013
      - EB
    ConstraintDescription: must be 'AL2013' only

  PublicKeyBody:
    Type: String
    Description: EC2 public key
    AllowedPattern: ssh-rsa .*
    ConstraintDescription: must be a valid RSA public key

  MyIP:
    Type: String
    Description: My IP address
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
    ConstraintDescription: must be a valid IP address of the form x.x.x.x

Mappings:
  RegionProfile2AMI:
    ap-northeast-1:
      AL2013: ami-067871d950411e643
      EB: ami-0b2ac252459e06dd1

  RegionProfile2Type:
    ap-northeast-1:
      AL2013: t2.micro
      EB: t2.micro

Resources:
  SSHKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Sub: ${AWS::StackName}-SSHKeyPair
      PublicKeyMaterial:
        Ref: PublicKeyBody

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.16.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.32.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet2

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.48.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet3

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: RouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable

  WebPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName:
        Fn::Sub: ${AWS::StackName}-WebPrefixList
      MaxEntries: 1
      AddressFamily: IPv4
      Entries:
        - Cidr:
            Fn::Sub: ${MyIP}/32
          Description: My IP
      Tags:
        - Key: Name
          Value: WebPrefixList

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-WebSecurityGroup
      GroupDescription: Web security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            Ref: WebPrefixList
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::Sub: ${MyIP}/32
      Tags:
        - Key: Name
          Value: WebSecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  AsgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-AsgLaunchTemplate
      VersionDescription: Launch template for auto scaling group
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: AsgLaunchTemplate
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
            - RegionProfile2AMI
            - Ref: AWS::Region
            - Ref: Profile
        InstanceType:
          Fn::FindInMap:
            - RegionProfile2Type
            - Ref: AWS::Region
            - Ref: Profile
        KeyName:
          Ref: SSHKeyPair
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        SecurityGroupIds:
          - Ref: WebSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: AsgInstance
        UserData:
          Fn::Base64: |
            #!/bin/sh
            dnf update -y
            dnf install -y httpd wget php-fpm php-mysqli php-json php php-devel
            dnf install -y mariadb105-server
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGatewayAttachment
    Properties:
      AutoScalingGroupName:
        Fn::Sub: ${AWS::StackName}-AutoScalingGroup
      MinSize: 0
      MaxSize: 3
      DesiredCapacity: 1
      DesiredCapacityType: units
      DefaultInstanceWarmup: 120
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - Ref: Subnet
        - Ref: Subnet2
        - Ref: Subnet3
      LaunchTemplate:
        LaunchTemplateId:
          Ref: AsgLaunchTemplate
        Version:
          Fn::GetAtt: AsgLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: AutoScalingGroup
          PropagateAtLaunch: false
