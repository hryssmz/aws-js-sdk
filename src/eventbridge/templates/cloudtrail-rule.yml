# eventbridge/templates/cloudtrail-rule.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: CloudTrail event rule

Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      Tags:
        - Key: Name
          Value: EC2Instance

  LogEC2StopFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-LogEC2StopFunction

  LogEC2StopFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-LogEC2StopFunction
      Description: Serverless function with EventBridge rule configured
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: LogEC2StopFunctionLogGroup
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - Fn::Sub: ec2.${AWS::URLSuffix}
                eventName:
                  - StopInstances
      InlineCode: |
        exports.handler = async event => {
          console.log("LogEC2StopInstance");
          console.log("Received event:", JSON.stringify(event, null, 2));
          return "Finished";
        };

  Trail:
    Type: AWS::CloudTrail::Trail
    DependsOn: TrailBucketPolicy
    Properties:
      TrailName:
        Fn::Sub: ${AWS::StackName}-Trail
      IsLogging: true
      S3BucketName:
        Ref: TrailBucket
      IncludeGlobalServiceEvents: true
      EnableLogFileValidation: true
      EventSelectors:
        - IncludeManagementEvents: true
          ReadWriteType: All
          ExcludeManagementEventSources:
            - Fn::Sub: kms.${AWS::URLSuffix}
            - Fn::Sub: rdsdata.${AWS::URLSuffix}

  TrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-trailbucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: TrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service:
                Fn::Sub: cloudtrail.${AWS::URLSuffix}
            Action:
              - s3:GetBucketAcl
            Resource:
              - Fn::GetAtt: TrailBucket.Arn
            Condition:
              StringEquals:
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${AWS::StackName}-Trail
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service:
                Fn::Sub: cloudtrail.${AWS::URLSuffix}
            Action:
              - s3:PutObject
            Resource:
              - Fn::Sub: ${TrailBucket.Arn}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${AWS::StackName}-Trail
