# cloudtrail/templates/kinesis-subscription.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Subscription filters with Kinesis Data Streams

Resources:
  # Kinesis
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-KinesisStream
      ShardCount: 1
      StreamModeDetails:
        StreamMode: PROVISIONED

  ConsumerFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionPolicy-${AWS::Region}
      Description: Policy for ConsumerFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kinesis:GetRecords
              - kinesis:GetShardIterator
              - kinesis:DescribeStream
              - kinesis:ListShards
              - kinesis:ListStreams
            Resource:
              - Fn::GetAtt: KinesisStream.Arn

  ConsumerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionRole-${AWS::Region}
      Description: Service role for ConsumerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ConsumerFunctionPolicy

  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunction
      Description: Kinesis stream consumer function
      Role:
        Fn::GetAtt: ConsumerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Events:
        KinesisEvent:
          Type: Kinesis
          Properties:
            Stream:
              Fn::GetAtt: KinesisStream.Arn
            StartingPosition: LATEST
            BatchSize: 3
      InlineCode: |
        const zlib = require("zlib");

        exports.handler = async event => {
          const records = event.Records.map(({ kinesis }) => kinesis).map(
            ({ partitionKey, data }) => ({
              partitionKey,
              data: JSON.parse(zlib.gunzipSync(Buffer.from(data, "base64")).toString()),
            })
          );
          console.log(JSON.stringify(records, null, 2));
          return records;
        };

  ConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ConsumerFunction}

  # CloudWatch Logs
  SubscriptionFilterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-SubscriptionFilterPolicy-${AWS::Region}
      Description: Policy for subscription filter
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecord
            Resource:
              - Fn::GetAtt: KinesisStream.Arn

  SubscriptionFilterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SubscriptionFilterRole-${AWS::Region}
      Description: Service role for subscription filter
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringLike:
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
      ManagedPolicyArns:
        - Ref: SubscriptionFilterPolicy

  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      FilterName:
        Fn::Sub: ${AWS::StackName}-SubscriptionFilter
      LogGroupName:
        Ref: TrailLogGroup
      DestinationArn:
        Fn::GetAtt: KinesisStream.Arn
      RoleArn:
        Fn::GetAtt: SubscriptionFilterRole.Arn
      FilterPattern: "{ ($.eventName = DescribeStacks) || ($.eventName = ListBuckets) }"

  # CloudTrail
  TrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/cloudtrail/${AWS::StackName}-TrailLogGroup

  TrailPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-TrailPolicy-${AWS::Region}
      Description: Policy for Trail
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${TrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*

  TrailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-TrailRole-${AWS::Region}
      Description: Service role Trail
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: TrailPolicy

  Trail:
    Type: AWS::CloudTrail::Trail
    DependsOn: TrailBucketPolicy
    Properties:
      TrailName:
        Fn::Sub: ${AWS::StackName}-Trail
      IsLogging: true
      S3BucketName:
        Ref: TrailBucket
      IncludeGlobalServiceEvents: true
      EnableLogFileValidation: true
      EventSelectors:
        - IncludeManagementEvents: true
          ReadWriteType: All
          ExcludeManagementEventSources:
            - kms.amazonaws.com
            - rdsdata.amazonaws.com
      CloudWatchLogsLogGroupArn:
        Fn::GetAtt: TrailLogGroup.Arn
      CloudWatchLogsRoleArn:
        Fn::GetAtt: TrailRole.Arn

  TrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-trailbucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: TrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              - Fn::GetAtt: TrailBucket.Arn
            Condition:
              StringEquals:
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${AWS::StackName}-Trail
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - Fn::Sub: ${TrailBucket.Arn}/AWSLogs/${AWS::AccountId}/*
              - Fn::Sub: ${TrailBucket.Arn}/*/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${AWS::StackName}-Trail
