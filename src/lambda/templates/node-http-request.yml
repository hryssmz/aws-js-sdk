AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
  HttpRequestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-HttpRequestFunctionRole-${AWS::Region}
      Description: Service role for HttpRequestFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HttpRequestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-HttpRequestFunction

  HttpRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HttpRequestFunction
      Description: Send an HTTP request
      Role:
        Fn::GetAtt: HttpRequestFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: HttpRequestFunctionLogGroup
      InlineCode: |
        const http = require("node:http");

        exports.handler = async () => {
          const globalIpAddress = await new Promise((resolve, reject) => {
            const req = http.request(
              { hostname: "ifconfig.me", port: 80, path: "/", method: "GET" },
              res => {
                res.on("data", chunk => {
                  const body = chunk.toString();
                  resolve(body);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.end();
          });

          return globalIpAddress;
        };

  HttpsRequestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-HttpsRequestFunctionRole-${AWS::Region}
      Description: Service role for HttpsRequestFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HttpsRequestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-HttpsRequestFunction

  HttpsRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HttpsRequestFunction
      Description: Send an HTTPS request
      Role:
        Fn::GetAtt: HttpsRequestFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: HttpsRequestFunctionLogGroup
      InlineCode: |
        const https = require("node:https");

        exports.handler = async () => {
          const globalIpAddress = await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname: "ifconfig.me", port: 443, path: "/", method: "GET" },
              res => {
                res.on("data", chunk => {
                  const body = chunk.toString();
                  resolve(body);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.end();
          });

          return globalIpAddress;
        };
