# appsync/templates/dynamodb-data-source.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: DynamoDB data source example

Resources:
  DynamoDBDataSourcePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-DynamoDBDataSourcePolicy-${AWS::Region}
      Description: CRUD policy for DynamoDB data source
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - "*"

  DynamoDBDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-DynamoDBDataSourceRole-${AWS::Region}
      Description: CRUD role for DynamoDB data source
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: appsync.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: DynamoDBDataSourcePolicy

  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CommentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: todoid
          AttributeType: S
        - AttributeName: commentid
          AttributeType: S
      KeySchema:
        - AttributeName: todoid
          KeyType: HASH
        - AttributeName: commentid
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: todoid-index
          KeySchema:
            - AttributeName: todoid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  GraphQLApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-GraphQLApiLoggingRole-${AWS::Region}
      Description: Logging role for GraphQl API
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: appsync.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name:
        Ref: AWS::StackName
      LogConfig:
        CloudWatchLogsRoleArn:
          Fn::GetAtt: GraphQLApiLoggingRole.Arn
        ExcludeVerboseContent: true
        FieldLogLevel: ERROR

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
        }

        type Query {
          getTodos(limit: Int, nextToken: String): TodoConnection
        }

        type Mutation {
          addTodo(
            id: ID!
            name: String
            description: String
            priority: Int
            status: TodoStatus
          ): Todo
          addComment(todoid: ID!, content: String): Comment
        }

        type Comment {
          todoid: ID!
          commentid: String!
          content: String
        }

        type Todo {
          id: ID!
          name: String
          description: String
          priority: Int
          status: TodoStatus
          comments: [Comment]
        }

        type TodoConnection {
          todos: [Todo]
          nextToken: String
        }

        enum TodoStatus {
          done
          pending
        }

  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: My GraphQl API key

  TodoTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: TodoTable data source
      Name: TodoTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt: DynamoDBDataSourceRole.Arn
      DynamoDBConfig:
        AwsRegion:
          Ref: AWS::Region
        TableName:
          Ref: TodoTable

  CommentTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: CommentTable data source
      Name: CommentTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt: DynamoDBDataSourceRole.Arn
      DynamoDBConfig:
        AwsRegion:
          Ref: AWS::Region
        TableName:
          Ref: CommentTable

  CreateTodoFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Name: CREATE_TODO
      Description: Create Todo function
      DataSourceName:
        Fn::GetAtt: TodoTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        import { util } from "@aws-appsync/utils";

        // Sends a request to `put` an item in the DynamoDB data source
        export function request(ctx) {
          const { id, ...values } = ctx.args;
          return {
            operation: "PutItem",
            key: util.dynamodb.toMapValues({ id }),
            attributeValues: util.dynamodb.toMapValues(values),
          };
        }

        // returns the result of the `put` operation
        export function response(ctx) {
          return ctx.result;
        }

  ScanTodosFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Name: SCAN_TODOS
      Description: Scan Todos function
      DataSourceName:
        Fn::GetAtt: TodoTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        import { util } from "@aws-appsync/utils";

        // Performs a scan on the dynamodb data source
        export function request(ctx) {
          const { limit = 20, nextToken } = ctx.args;
          return { operation: "Scan", limit, nextToken };
        }

        // return a list of scanned todo items
        export function response(ctx) {
          const { items: todos = [], nextToken } = ctx.result;
          return { todos, nextToken };
        }

  TodoCommentsFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Name: TODO_COMMENTS
      Description: Todo comments function
      DataSourceName:
        Fn::GetAtt: CommentTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        import { util } from "@aws-appsync/utils";

        export function request(ctx) {
          const { id } = ctx.source;
          return {
            operation: "Query",
            index: "todoid-index",
            query: {
              expression: "todoid = :todoid",
              expressionValues: util.dynamodb.toMapValues({ ":todoid": id }),
            },
          };
        }

        export function response(ctx) {
          return ctx.result.items;
        }

  CreateCommentFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Name: CREATE_COMMENT
      Description: Create comment function
      DataSourceName:
        Fn::GetAtt: CommentTableDataSource.Name
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0
      Code: |
        import { util } from "@aws-appsync/utils";

        export function request(ctx) {
          const { todoid, ...values } = ctx.args;
          return {
            operation: "PutItem",
            key: util.dynamodb.toMapValues({ todoid, commentid: util.autoId() }),
            attributeValues: util.dynamodb.toMapValues(values),
          };
        }

        export function response(ctx) {
          return ctx.result;
        }

  AddTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: PIPELINE
      TypeName: Mutation
      FieldName: addTodo
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: $util.toJson($ctx.result)
      PipelineConfig:
        Functions:
          - Fn::GetAtt: CreateTodoFunction.FunctionId

  GetTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: PIPELINE
      TypeName: Query
      FieldName: getTodos
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: $util.toJson($ctx.result)
      PipelineConfig:
        Functions:
          - Fn::GetAtt: ScanTodosFunction.FunctionId

  TodoCommentsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: PIPELINE
      TypeName: Todo
      FieldName: comments
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: $util.toJson($ctx.result)
      PipelineConfig:
        Functions:
          - Fn::GetAtt: TodoCommentsFunction.FunctionId

  AddCommentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: PIPELINE
      TypeName: Mutation
      FieldName: addComment
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: $util.toJson($ctx.result)
      PipelineConfig:
        Functions:
          - Fn::GetAtt: CreateCommentFunction.FunctionId

Outputs:
  GraphQLApiId:
    Value:
      Fn::GetAtt: GraphQLApi.ApiId

  GraphQLApiKey:
    Value:
      Fn::GetAtt: GraphQLApiKey.ApiKey
