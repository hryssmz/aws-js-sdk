# appsync/templates/dynamodb-data-source-vtl.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: DynamoDB data source example (VTL)

Resources:
  DynamoDBDataSourcePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-DynamoDBDataSourcePolicy-${AWS::Region}
      Description: CRUD policy for DynamoDB data source
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - "*"

  DynamoDBDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-DynamoDBDataSourceRole-${AWS::Region}
      Description: CRUD role for DynamoDB data source
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: DynamoDBDataSourcePolicy

  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CommentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: todoid
          AttributeType: S
        - AttributeName: commentid
          AttributeType: S
      KeySchema:
        - AttributeName: todoid
          KeyType: HASH
        - AttributeName: commentid
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: todoid-index
          KeySchema:
            - AttributeName: todoid
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  GraphQLApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-GraphQLApiLoggingRole-${AWS::Region}
      Description: Logging role for GraphQl API
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name:
        Ref: AWS::StackName
      LogConfig:
        CloudWatchLogsRoleArn:
          Fn::GetAtt: GraphQLApiLoggingRole.Arn
        ExcludeVerboseContent: true
        FieldLogLevel: ERROR

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
        }

        type Query {
          getTodos(limit: Int, nextToken: String): TodoConnection
        }

        type Mutation {
          addTodo(
            id: ID!
            name: String
            description: String
            priority: Int
            status: TodoStatus
          ): Todo
          addComment(todoid: ID!, content: String): Comment
        }

        type Comment {
          todoid: ID!
          commentid: String!
          content: String
        }

        type Todo {
          id: ID!
          name: String
          description: String
          priority: Int
          status: TodoStatus
          comments: [Comment]
        }

        type TodoConnection {
          todos: [Todo]
          nextToken: String
        }

        enum TodoStatus {
          done
          pending
        }

  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: My GraphQl API key

  TodoTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: TodoTable data source
      Name: TodoTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt: DynamoDBDataSourceRole.Arn
      DynamoDBConfig:
        AwsRegion:
          Ref: AWS::Region
        TableName:
          Ref: TodoTable

  CommentTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Description: CommentTable data source
      Name: CommentTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt: DynamoDBDataSourceRole.Arn
      DynamoDBConfig:
        AwsRegion:
          Ref: AWS::Region
        TableName:
          Ref: CommentTable

  AddTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: UNIT
      DataSourceName:
        Fn::GetAtt: TodoTableDataSource.Name
      TypeName: Mutation
      FieldName: addTodo
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  GetTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: UNIT
      DataSourceName:
        Fn::GetAtt: TodoTableDataSource.Name
      TypeName: Query
      FieldName: getTodos
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        {
          "todos": $util.toJson($context.result.items),
          "nextToken": $util.toJson($context.result.nextToken)
        }

  TodoCommentsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: UNIT
      DataSourceName:
        Fn::GetAtt: CommentTableDataSource.Name
      TypeName: Todo
      FieldName: comments
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "index": "todoid-index",
          "query": {
            "expression": "todoid = :todoid",
            "expressionValues": {
              ":todoid": {
                "S": $util.toJson($context.source.id)
              }
            }
          }
        }
      ResponseMappingTemplate: $util.toJson($ctx.result.items)

  AddCommentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: GraphQLApi.ApiId
      Kind: UNIT
      DataSourceName:
        Fn::GetAtt: CommentTableDataSource.Name
      TypeName: Mutation
      FieldName: addComment
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "todoid": { "S": $util.toJson($context.arguments.todoid) },
            "commentid": { "S": "$util.autoId()" }
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

Outputs:
  GraphQLApiId:
    Value:
      Fn::GetAtt: GraphQLApi.ApiId

  GraphQLApiKey:
    Value:
      Fn::GetAtt: GraphQLApiKey.ApiKey
