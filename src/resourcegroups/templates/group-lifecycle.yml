# resourcegroups/templates/group-lifecycle.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Creating an EventBridge rule to capture group lifecycle events and publish notifications

Resources:
  # Some resources
  DevelopmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-developmentbucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: Development

  ProductionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-productionbucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: Production

  DevelopmentTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-DevelopmentTable
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        Environment: Development

  # Resource group
  ResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ResourceGroup
      Description: Tag-based resource group
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - AWS::S3::Bucket
          TagFilters:
            - Key: Environment
              Values:
                - Development

  RGTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-RGTopic
      FifoTopic: false

  ResourceGroupRule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ResourceGroupRule
      Description: Event rule for resource group
      EventPattern:
        source:
          - aws.resource-groups
        detail:
          group:
            arn:
              - Fn::GetAtt: ResourceGroup.Arn
      Targets:
        - Id:
            Fn::GetAtt: RGTopic.TopicName
          Arn:
            Ref: RGTopic

  RGTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - Ref: RGTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Principal:
              Service:
                Fn::Sub: events.${AWS::URLSuffix}
            Resource:
              - Ref: RGTopic
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt: ResourceGroupRule.Arn

  RGTopicFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-RGTopicFunctionRole-${AWS::Region}
      Description: Service role for RGTopicFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RGTopicFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-RGTopicFunction

  RGTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-RGTopicFunction
      Description: Serverless function with EventBridge rule configured
      Role:
        Fn::GetAtt: RGTopicFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: RGTopicFunctionLogGroup
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: RGTopic
      InlineCode: |
        exports.handler = async event => {
          const { Records } = event;
          const records = Records.map(({ Sns }) => Sns).map(({ Message }) =>
            JSON.parse(Message)
          );
          records.forEach(record => {
            console.log(JSON.stringify(record, null, 2));
          });
          return records;
        };
