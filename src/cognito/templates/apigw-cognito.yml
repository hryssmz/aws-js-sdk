# cognito/templates/apigw-cognito.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Use Cognito as authorizer for API Gateway

Parameters:
  Username:
    Type: String
    Description: User name
    Default: hryssmz@yahoo.com

  Password:
    Type: String
    Description: User password
    Default: P@ssw0rd

  EmailAddress:
    Type: String
    Description: Email address
    Default: hryssmz@yahoo.com

Resources:
  # User pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          RequireLowercase: false
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-UserPoolClient
      UserPoolId:
        Ref: UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email

  # REST API
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        servers:
          - url: https://{restApiId}.execute-api.{region}.amazonaws.com/{basePath}
            variables:
              restApiId:
                default: 5yxgxm5x00
              region:
                default: ap-northeast-1
              basePath:
                default: dev
        paths:
          /access:
            get:
              operationId: GetAuthAccess
              tags:
                - GetAuthAccess
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/GetAuthAccessResponse"
                      examples:
                        example1:
                          value:
                            origin_jti: 792116d6-02b9-4021-83f9-e5e14f3eb4c8
                            sub: b771dac0-aa13-4207-a8e2-3bf2326ba8db
                            event_id: 41b4d820-5656-4bb4-b6a9-a9af94dd6872
                            token_use: access
                            scope: aws.cognito.signin.user.admin
                            auth_time: "1694790140"
                            iss: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_WL4lJfCBP
                            exp: Fri Sep 15 16:02:20 UTC 2023
                            iat: Fri Sep 15 15:02:20 UTC 2023
                            client_id: 1atr7b11nk6q2m1qhnfbs8086i
                            jti: 01453155-c34d-4221-82d2-623f5c4ee76d
                            username: hryssmz
                  headers:
                    Access-Control-Allow-Origin:
                      description: Response header for CORS support
                      schema:
                        type: string
              security:
                - CognitoAuthorizer:
                    - aws.cognito.signin.user.admin
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAuthAccessFunction.Arn}/invocations
                httpMethod: POST
          /id:
            get:
              operationId: GetAuthId
              tags:
                - GetAuthId
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/GetAuthIdResponse"
                      examples:
                        example1:
                          value:
                            sub: b771dac0-aa13-4207-a8e2-3bf2326ba8db
                            email_verified: "true"
                            iss: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_WL4lJfCBP
                            cognito:username: hryssmz
                            origin_jti: 792116d6-02b9-4021-83f9-e5e14f3eb4c8
                            aud: 1atr7b11nk6q2m1qhnfbs8086i
                            event_id: 41b4d820-5656-4bb4-b6a9-a9af94dd6872
                            token_use: id
                            auth_time: "1694790140"
                            exp: Fri Sep 15 16:02:20 UTC 2023
                            iat: Fri Sep 15 15:02:20 UTC 2023
                            jti: "08d67f1e-75ff-4452-a6d3-2e8c46a83ff1"
                            email: hryssmz@yahoo.com
                  headers:
                    Access-Control-Allow-Origin:
                      description: Response header for CORS support
                      schema:
                        type: string
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAuthIdFunction.Arn}/invocations
                httpMethod: POST
        components:
          securitySchemes:
            CognitoAuthorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - Fn::GetAtt: UserPool.Arn
          schemas:
            GetAuthAccessResponse:
              description: Response body for GET /access
              type: object
            GetAuthIdResponse:
              description: Response body for GET /id
              type: object

  GetAuthAccessFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-GetAuthAccessFunctionRole-${AWS::Region}
      Description: Service role for GetAuthAccessFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetAuthAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-GetAuthAccessFunction
      Description: Get auth access function
      Role:
        Fn::GetAtt: GetAuthAccessFunctionRole.Arn
      Runtime: nodejs18.x
      Handler: index.handler
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /access
            RestApiId:
              Ref: RestApi
      InlineCode: |
        exports.handler = async event => {
          const body = event.requestContext.authorizer.claims;
          return {
            statusCode: 200,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: JSON.stringify(body, null, 2),
          };
        };

  GetAuthAccessFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetAuthAccessFunction}

  GetAuthIdFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-GetAuthIdFunctionRole-${AWS::Region}
      Description: Service role for GetAuthIdFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetAuthIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-GetAuthIdFunction
      Description: Get auth ID function
      Role:
        Fn::GetAtt: GetAuthIdFunctionRole.Arn
      Runtime: nodejs18.x
      Handler: index.handler
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /id
            RestApiId:
              Ref: RestApi
      InlineCode: |
        exports.handler = async event => {
          const body = event.requestContext.authorizer.claims;
          return {
            statusCode: 200,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: JSON.stringify(body, null, 2),
          };
        };

  GetAuthIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetAuthIdFunction}

  # Lambda
  CreateUserFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-CreateUserFunctionPolicy-${AWS::Region}
      Description: Execution policy for CreateUserFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminRespondToAuthChallenge
            Resource:
              - Fn::GetAtt: UserPool.Arn

  CreateUserFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CreateUserFunctionRole-${AWS::Region}
      Description: Service role for CreateUserFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: CreateUserFunctionPolicy

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-CreateUserFunction
      Description: Create user function
      Role:
        Fn::GetAtt: CreateUserFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          PASSWORD:
            Ref: Password
          EMAIL_ADDRESS:
            Ref: EmailAddress
          USER_POOL_ID:
            Ref: UserPool
          CLIENT_ID:
            Ref: UserPoolClient
      InlineCode: |
        const {
          AdminCreateUserCommand,
          AdminInitiateAuthCommand,
          AdminRespondToAuthChallengeCommand,
          CognitoIdentityProviderClient,
        } = require("@aws-sdk/client-cognito-identity-provider");

        exports.handler = async () => {
          const username = process.env.USERNAME;
          const password = process.env.PASSWORD;
          const email = process.env.EMAIL_ADDRESS;
          const userPoolId = process.env.USER_POOL_ID;
          const clientId = process.env.CLIENT_ID;
          const client = new CognitoIdentityProviderClient({});

          const adminCreateUserCommand = new AdminCreateUserCommand({
            UserPoolId: userPoolId,
            Username: username,
            UserAttributes: [
              { Name: "email", Value: email },
              { Name: "email_verified", Value: "true" },
            ],
            TemporaryPassword: `temp-${password}`,
            DesiredDeliveryMediums: ["EMAIL"],
          });
          await client.send(adminCreateUserCommand);

          const adminInitiateAuthCommand = new AdminInitiateAuthCommand({
            UserPoolId: userPoolId,
            ClientId: clientId,
            AuthFlow: "ADMIN_USER_PASSWORD_AUTH",
            AuthParameters: {
              USERNAME: username,
              PASSWORD: `temp-${password}`,
            },
          });
          const { Session, ChallengeName } = await client.send(
            adminInitiateAuthCommand
          );

          const adminRespondToAuthChallengeCommand =
            new AdminRespondToAuthChallengeCommand({
              UserPoolId: userPoolId,
              ClientId: clientId,
              ChallengeName,
              ChallengeResponses: {
                USERNAME: username,
                NEW_PASSWORD: password,
              },
              Session,
            });
          const { AuthenticationResult } = await client.send(
            adminRespondToAuthChallengeCommand
          );

          const accessToken = AuthenticationResult?.AccessToken;
          const idToken = AuthenticationResult?.IdToken;

          if (accessToken !== undefined) {
            const payload = Buffer.from(accessToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          if (idToken !== undefined) {
            const payload = Buffer.from(idToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          return AuthenticationResult;
        };

  CreateUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CreateUserFunction}

  SignInFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SignInFunctionRole-${AWS::Region}
      Description: Service role for SignInFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SignInFunction
      Description: Sign in function
      Role:
        Fn::GetAtt: SignInFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          PASSWORD:
            Ref: Password
          CLIENT_ID:
            Ref: UserPoolClient
      InlineCode: |
        const {
          CognitoIdentityProviderClient,
          InitiateAuthCommand,
        } = require("@aws-sdk/client-cognito-identity-provider");

        exports.handler = async () => {
          const username = process.env.USERNAME;
          const password = process.env.PASSWORD;
          const clientId = process.env.CLIENT_ID;
          const client = new CognitoIdentityProviderClient({});

          const initiateAuthCommand = new InitiateAuthCommand({
            ClientId: clientId,
            AuthFlow: "USER_PASSWORD_AUTH",
            AuthParameters: {
              USERNAME: username,
              PASSWORD: password,
            },
          });
          const { AuthenticationResult } = await client.send(initiateAuthCommand);

          const accessToken = AuthenticationResult?.AccessToken;
          const idToken = AuthenticationResult?.IdToken;

          if (accessToken !== undefined) {
            const payload = Buffer.from(accessToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          if (idToken !== undefined) {
            const payload = Buffer.from(idToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          return AuthenticationResult;
        };

  SignInFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SignInFunction}

  ExecuteApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ExecuteApiFunctionRole-${AWS::Region}
      Description: Service role for ExecuteApiFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ExecuteApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExecuteApiFunction
      Description: Sign in function
      Role:
        Fn::GetAtt: ExecuteApiFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          PASSWORD:
            Ref: Password
          CLIENT_ID:
            Ref: UserPoolClient
          API_HOST:
            Fn::Sub: ${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
          API_PATH:
            Fn::Sub: /${RestApi.Stage}/access/
      InlineCode: |
        const https = require("https");
        const {
          CognitoIdentityProviderClient,
          InitiateAuthCommand,
        } = require("@aws-sdk/client-cognito-identity-provider");

        exports.handler = async () => {
          const accessToken = await getAccessToken();
          const resBody = await new Promise((resolve, reject) => {
            const req = https.request(
              {
                hostname: process.env.API_HOST,
                path: process.env.API_PATH,
                method: "GET",
                headers: { Authorization: accessToken },
              },
              res => {
                res.on("data", chunk => {
                  const body = JSON.parse(chunk.toString());
                  resolve(body);
                });
              }
            );
            req.on("error", error => {
              reject(error);
            });
            req.end();
          });
          return resBody;
        };

        const getAccessToken = async () => {
          const username = process.env.USERNAME;
          const password = process.env.PASSWORD;
          const clientId = process.env.CLIENT_ID;
          const client = new CognitoIdentityProviderClient();

          const initiateAuthCommand = new InitiateAuthCommand({
            ClientId: clientId,
            AuthFlow: "USER_PASSWORD_AUTH",
            AuthParameters: {
              USERNAME: username,
              PASSWORD: password,
            },
          });
          const { AuthenticationResult } = await client.send(initiateAuthCommand);
          return AuthenticationResult?.AccessToken;
        };

  ExecuteApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ExecuteApiFunction}

Outputs:
  UserPool:
    Description: User pool ID
    Value:
      Ref: UserPool

  UserPoolClient:
    Description: User pool client ID
    Value:
      Ref: UserPoolClient

  RestApi:
    Description: REST API ID
    Value:
      Ref: RestApi

  RestApiUrl:
    Description: REST API URL
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}
