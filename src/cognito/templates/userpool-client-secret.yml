# cognito/templates/userpool-client-secret.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Userpool client with secret

Parameters:
  Username:
    Type: String
    Description: User name
    Default: hryssmz

  Password:
    Type: String
    Description: User password
    Default: P@ssw0rd

  EmailAddress:
    Type: String
    Description: Email address
    Default: hryssmz@yahoo.com

  UserPoolClientSecret:
    Type: String
    Description: Secret for User Pool client
    Default: ""

Resources:
  # Cognito resources
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          RequireLowercase: false
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-UserPoolClient
      UserPoolId:
        Ref: UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email

  # Lambda resources
  SignUpFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SignUpFunctionRole-${AWS::Region}
      Description: Service role for SignUpFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SignUpFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-SignUpFunction

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SignUpFunction
      Description: Sign up function
      Role:
        Fn::GetAtt: SignUpFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: SignUpFunctionLogGroup
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          PASSWORD:
            Ref: Password
          EMAIL_ADDRESS:
            Ref: EmailAddress
          CLIENT_ID:
            Ref: UserPoolClient
          HOST_NAME:
            Fn::Sub: cognito-idp.${AWS::Region}.${AWS::URLSuffix}
          CLIENT_SECRET:
            Ref: UserPoolClientSecret
      InlineCode: |
        const crypto = require("node:crypto");
        const https = require("node:https");

        exports.handler = async () => {
          const username = process.env.USERNAME;
          const password = process.env.PASSWORD;
          const email = process.env.EMAIL_ADDRESS;
          const clientId = process.env.CLIENT_ID;
          const hostname = process.env.HOST_NAME;
          const clientSecret = process.env.CLIENT_SECRET;
          const secretHash = crypto
            .createHmac("sha256", clientSecret)
            .update(`${username}${clientId}`)
            .digest("base64");
          const reqBody = {
            ClientId: clientId,
            Username: username,
            Password: password,
            SecretHash: secretHash,
            UserAttributes: [{ Name: "email", Value: email }],
          };
          const headers = {
            "Content-Type": "application/x-amz-json-1.1",
            "X-Amz-Target": "AWSCognitoIdentityProviderService.SignUp",
          };
          const response = await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname, port: 443, path: "/", method: "POST", headers },
              res => {
                res.on("data", chunk => {
                  const resBody = JSON.parse(chunk.toString());
                  resolve(resBody);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.write(JSON.stringify(reqBody, null, 2));
            req.end();
          });

          return response;
        };

  ConfirmEmailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ConfirmEmailFunctionRole-${AWS::Region}
      Description: Service role for ConfirmEmailFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ConfirmEmailFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ConfirmEmailFunction

  ConfirmEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ConfirmEmailFunction
      Description: Confirm E-mail function
      Role:
        Fn::GetAtt: ConfirmEmailFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ConfirmEmailFunctionLogGroup
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          CLIENT_ID:
            Ref: UserPoolClient
          HOST_NAME:
            Fn::Sub: cognito-idp.${AWS::Region}.${AWS::URLSuffix}
          CLIENT_SECRET:
            Ref: UserPoolClientSecret
      InlineCode: |
        const crypto = require("node:crypto");
        const https = require("node:https");

        exports.handler = async event => {
          const { code } = event;
          const username = process.env.USERNAME;
          const clientId = process.env.CLIENT_ID;
          const hostname = process.env.HOST_NAME;
          const clientSecret = process.env.CLIENT_SECRET;
          const secretHash = crypto
            .createHmac("sha256", clientSecret)
            .update(`${username}${clientId}`)
            .digest("base64");
          const reqBody = {
            ClientId: clientId,
            Username: username,
            SecretHash: secretHash,
            ConfirmationCode: code,
          };
          const headers = {
            "Content-Type": "application/x-amz-json-1.1",
            "X-Amz-Target": "AWSCognitoIdentityProviderService.ConfirmSignUp",
          };
          const response = await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname, port: 443, path: "/", method: "POST", headers },
              res => {
                res.on("data", chunk => {
                  const resBody = JSON.parse(chunk.toString());
                  resolve(resBody);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.write(JSON.stringify(reqBody, null, 2));
            req.end();
          });

          return response;
        };

  SignInFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SignInFunctionRole-${AWS::Region}
      Description: Service role for SignInFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SignInFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-SignInFunction

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SignInFunction
      Description: Sign in function
      Role:
        Fn::GetAtt: SignInFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: SignInFunctionLogGroup
      Environment:
        Variables:
          USERNAME:
            Ref: Username
          PASSWORD:
            Ref: Password
          CLIENT_ID:
            Ref: UserPoolClient
          HOST_NAME:
            Fn::Sub: cognito-idp.${AWS::Region}.${AWS::URLSuffix}
          CLIENT_SECRET:
            Ref: UserPoolClientSecret
      InlineCode: |
        const crypto = require("node:crypto");
        const https = require("node:https");

        exports.handler = async () => {
          const username = process.env.USERNAME;
          const password = process.env.PASSWORD;
          const clientId = process.env.CLIENT_ID;
          const hostname = process.env.HOST_NAME;
          const clientSecret = process.env.CLIENT_SECRET;
          const secretHash = crypto
            .createHmac("sha256", clientSecret)
            .update(`${username}${clientId}`)
            .digest("base64");
          const reqBody = {
            ClientId: clientId,
            AuthFlow: "USER_PASSWORD_AUTH",
            AuthParameters: {
              USERNAME: username,
              PASSWORD: password,
              SECRET_HASH: secretHash,
            },
          };
          const headers = {
            "Content-Type": "application/x-amz-json-1.1",
            "X-Amz-Target": "AWSCognitoIdentityProviderService.InitiateAuth",
          };
          const { AuthenticationResult } = await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname, port: 443, path: "/", method: "POST", headers },
              res => {
                res.on("data", chunk => {
                  const resBody = JSON.parse(chunk.toString());
                  resolve(resBody);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.write(JSON.stringify(reqBody, null, 2));
            req.end();
          });

          const accessToken = AuthenticationResult?.AccessToken;
          const idToken = AuthenticationResult?.IdToken;

          if (accessToken !== undefined) {
            const payload = Buffer.from(accessToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          if (idToken !== undefined) {
            const payload = Buffer.from(idToken.split(".")[1], "base64").toString();
            console.log(JSON.stringify(JSON.parse(payload), null, 2));
          }

          return AuthenticationResult;
        };
