# cognito/templates/alb-cognito.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Use Cognito as authorizer for Application Load Balancer (Failure)

Parameters:
  UserPoolDomainPrefix:
    Type: String
    Description: User pool domain prefix
    Default: hryssmz

  DomainName:
    Type: String
    Description: Hosted zone domain name
    Default: hryssmz.click

  ALBDomainName:
    Type: String
    Description: ALB domain name
    Default: app.hryssmz.click

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

  ContainerName:
    Type: String
    Description: App container name
    Default: fastapi

  DesiredCount:
    Type: Number
    Description: Desired task count for ECS service
    Default: 1
    MinValue: 0
    MaxValue: 1
    ConstraintDescription: Must be an integer between 0 and 1

Resources:
  # Route 53 resources
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name:
        Ref: DomainName
      HostedZoneConfig:
        Comment: My root hosted zone

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: My RecordSet group
      HostedZoneId:
        Ref: HostedZone
      RecordSets:
        - Name:
            Ref: ALBDomainName
          Type: A
          AliasTarget:
            DNSName:
              Fn::GetAtt: ALB.DNSName
            HostedZoneId:
              Fn::GetAtt: ALB.CanonicalHostedZoneID
            EvaluateTargetHealth: false

  # ACM resources
  ALBCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: ALBDomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            Ref: ALBDomainName
          HostedZoneId:
            Ref: HostedZone

  # Cognito resources
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          RequireLowercase: false
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: UserPool
      Domain:
        Ref: UserPoolDomainPrefix

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-UserPoolClient
      UserPoolId:
        Ref: UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email
      CallbackURLs:
        - Fn::Sub: http://localhost:13000/docs/oauth2-redirect
        - Fn::Sub: https://${ALBDomainName}/docs/oauth2-redirect
        - Fn::Sub: https://${ALBDomainName}/oauth2/idpresponse
        - Fn::Sub: https://${UserPoolDomainPrefix}.auth.${AWS::Region}.amazoncognito.com/oauth2/idpresponse
      DefaultRedirectURI:
        Fn::Sub: https://${ALBDomainName}/docs/oauth2-redirect
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - phone
        - openid
        - profile
        - aws.cognito.signin.user.admin

  # ECS resources
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ECSSecurityGroup
      GroupDescription: ECS task security group
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: ECSSecurityGroup

  ECSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP inbound rule
      GroupId:
        Ref: ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: ALBSecurityGroup

  ECSNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ECSNamespace
      Description: ECS namespace

  ECSExecLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${AWS::StackName}-ECSExecLogGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchLogGroupName:
              Ref: ECSExecLogGroup
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace:
          Fn::GetAtt: ECSNamespace.Arn

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSExecutionRole-${AWS::Region}
      Description: Service role for ECS container agents
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ecs-tasks.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSTaskRole-${AWS::Region}
      Description: Service role for ECS containers
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ecs-tasks.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${AWS::StackName}-ECSLogGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: ${AWS::StackName}-TaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ExecutionRoleArn:
        Fn::GetAtt: ECSExecutionRole.Arn
      TaskRoleArn:
        Fn::GetAtt: ECSTaskRole.Arn
      ContainerDefinitions:
        - Name:
            Ref: ContainerName
          Image: python:latest
          Environment:
            - Name: USER_POOL_DOMAIN_URL
              Value:
                Fn::Sub: https://${UserPoolDomainPrefix}.auth.${AWS::Region}.amazoncognito.com
            - Name: USER_POOL_CLIENT_SECRET
              Value:
                Fn::GetAtt: UserPoolClientSecret.ClientSecret
          Command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > main.py
              import json
              from typing import Annotated, Optional
              import uuid

              from fastapi import Depends, FastAPI, Form, status
              from fastapi.requests import Request
              from fastapi.responses import RedirectResponse
              from fastapi.security import OAuth2AuthorizationCodeBearer
              from pydantic import BaseModel
              from pydantic_settings import BaseSettings
              import requests


              class Settings(BaseSettings):
                  user_pool_domain_url: str = ""
                  user_pool_client_secret: str = ""
                  user_pool_client_id: str = ""


              class OAuth2Token(BaseModel):
                  access_token: str
                  id_token: str
                  refresh_token: str
                  token_type: str
                  expires_in: int


              class HelloWorld(BaseModel):
                  token: str
                  message: str


              class HealthCheck(BaseModel):
                  pass


              settings = Settings()
              app = FastAPI()

              oauth2_scheme = OAuth2AuthorizationCodeBearer(
                  scheme_name="cognito",
                  description="Cognito OAuth2 scheme",
                  authorizationUrl=f"{settings.user_pool_domain_url}/oauth2/authorize",
                  tokenUrl=f"{''}/oauth2/token",
                  refreshUrl=f"{settings.user_pool_domain_url}/oauth2/token",
                  scopes={
                      "email": "Email",
                      "phone": "Phone",
                      "openid": "OpenID",
                      "profile": "Profile",
                      "aws.cognito.signin.user.admin": "Cognito",
                  },
              )


              @app.post("/oauth2/token", response_model=OAuth2Token)
              async def fake_oauth2_token(
                  grant_type: Annotated[str, Form()],
                  code: Annotated[str, Form()],
                  client_id: Annotated[str, Form()],
                  redirect_uri: Annotated[str, Form()],
                  client_secret: Annotated[Optional[str], Form()] = None,
                  refresh_token: Annotated[Optional[str], Form()] = None,
              ) -> OAuth2Token:
                  form = {
                      "grant_type": grant_type,
                      "code": code,
                      "client_id": client_id,
                      "redirect_uri": redirect_uri,
                      "refresh_token": refresh_token,
                      "client_secret": client_secret,
                  }
                  print(json.dumps(form, indent=2, ensure_ascii=False))
                  fake_token = OAuth2Token(
                      access_token="fake_access_token",
                      id_token="fake_id_token",
                      refresh_token="fake_refresh_token",
                      token_type="Bearer",
                      expires_in=3600,
                  )
                  return fake_token


              @app.get("/oauth2/authorize", status_code=status.HTTP_302_FOUND)
              async def fake_oauth2_authorize(
                  response_type: str,
                  client_id: str,
                  redirect_uri: str,
                  state: Optional[str],
                  scope: Optional[str],
              ) -> RedirectResponse:
                  query_params = {
                      "response_type": response_type,
                      "client_id": client_id,
                      "redirect_uri": redirect_uri,
                      "state": state,
                      "scope": scope,
                  }
                  print(json.dumps(query_params, indent=2, ensure_ascii=False))
                  code = str(uuid.uuid4())
                  url = f"{redirect_uri}?code={code}&state={state}"
                  return RedirectResponse(url=url, status_code=status.HTTP_302_FOUND)


              @app.get("/oauth2/idpresponse", status_code=status.HTTP_302_FOUND)
              async def oauth2_idpresponse(request: Request, code: str) -> RedirectResponse:
                  headers = {"Content-Type": "application/x-www-form-urlencoded"}
                  redirect_uri = f"{request.base_url}oauth2/idpresponse"
                  body = {
                      "grant_type": "authorization_code",
                      "code": code,
                      "client_id": settings.user_pool_client_id,
                      "redirect_uri": redirect_uri,
                      "client_secret": settings.user_pool_client_secret,
                  }
                  res = requests.post(
                      f"{settings.user_pool_domain_url}/oauth2/token",
                      headers=headers,
                      data=body,
                  )
                  tokens = json.loads(res.text)
                  access_token: str = tokens["access_token"]
                  headers2 = {"Authorization": f"Bearer {access_token}"}
                  res2 = requests.get(
                      f"{settings.user_pool_domain_url}/oauth2/userInfo", headers=headers2
                  )
                  userinfo = json.loads(res2)
                  print(userinfo)
                  return RedirectResponse(redirect_uri, status_code=status.HTTP_302_FOUND)


              @app.get("/hello", response_model=HelloWorld)
              async def hello_world(
                  token: Annotated[str, Depends(oauth2_scheme)]
              ) -> HelloWorld:
                  return HelloWorld(token=token, message="Hello World!")


              @app.get("/", response_model=HealthCheck)
              async def health_check() -> HealthCheck:
                  return HealthCheck()
              EOF

              pip install fastapi[standard] python-multipart pydantic-settings requests
              fastapi run main.py --port 80
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: httpd
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost || exit 1
            StartPeriod: 60

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName:
        Fn::Sub: ${AWS::StackName}-ECSService
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Ref: TaskDefinition
      LaunchType: FARGATE
      DesiredCount:
        Ref: DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: ECSSecurityGroup
          Subnets:
            Ref: SubnetIds
      LoadBalancers:
        - ContainerName:
            Ref: ContainerName
          ContainerPort: 80
          TargetGroupArn:
            Ref: ALBTargetGroup
      HealthCheckGracePeriodSeconds: 60
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA

  # ELB resources
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ALBSecurityGroup
      GroupDescription: ALB security group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: HTTP outbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId:
            Ref: ECSSecurityGroup
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALB
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Subnets:
        Ref: SubnetIds

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALBTargetGroup
      VpcId:
        Ref: VpcId
      TargetType: ip
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: ALBCertificate
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values:
            - /hello
      Actions:
        - Type: authenticate-cognito
          AuthenticateCognitoConfig:
            UserPoolArn:
              Fn::GetAtt: UserPool.Arn
            UserPoolClientId:
              Ref: UserPoolClient
            UserPoolDomain:
              Ref: UserPoolDomain
          Order: 1
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
          Order: 2
      ListenerArn:
        Ref: ALBListener
      Priority: 1

  # Custom resources
  Route53DnsFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-Route53DnsFunctionPolicy-${AWS::Region}
      Description: Policy for Route53DnsFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: S3AccessPermissions
            Effect: Allow
            Action:
              - route53domains:UpdateDomainNameservers
            Resource: "*"
          - Sid: CloudWatchLogsAccessPermissions
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - Fn::Sub: ${Route53DnsFunctionLogGroup.Arn}

  Route53DnsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-Route53DnsFunctionRole-${AWS::Region}
      Description: Service role for Route53DnsFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: Route53DnsFunctionPolicy

  Route53DnsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-Route53DnsFunction

  Route53DnsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Route53DnsFunction
      Description: Route 53 DNS config function
      Role:
        Fn::GetAtt: Route53DnsFunctionRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs20.x
      Handler: index.handler
      Timeout: 30
      LoggingConfig:
        LogGroup:
          Ref: Route53DnsFunctionLogGroup
      InlineCode: |
        const https = require("https");
        const {
          Route53DomainsClient,
          UpdateDomainNameserversCommand,
        } = require("@aws-sdk/client-route-53-domains");

        const serialize = obj => JSON.stringify(obj, null, 2);

        const sendResponse = async (
          event,
          context,
          status,
          data,
          physicalResourceId,
          noEcho,
        ) => {
          const { StackId, RequestId, LogicalResourceId, ResponseURL } = event;
          const body = serialize({
            Status: status,
            Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
            PhysicalResourceId: physicalResourceId || context.logStreamName,
            Data: data,
            StackId,
            RequestId,
            LogicalResourceId,
            NoEcho: noEcho || false,
          });

          const { hostname, pathname, search } = new URL(ResponseURL);
          const path = `${pathname}${search}`;
          const headers = {
            "Content-Type": "application/json",
            "Content-Length": body.length,
          };

          return await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname, port: 443, path, method: "PUT", headers },
              res => {
                const chunks = [];
                res.on("data", chunk => {
                  chunks.push(chunk);
                });
                res.on("error", error => {
                  reject(error.message);
                });
                res.on("end", () => {
                  const data = Buffer.concat(chunks);
                  resolve(data);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.write(body);
            req.end();
          });
        };

        exports.handler = async (event, context) => {
          console.log(serialize(event));
          const client = new Route53DomainsClient({ region: "us-east-1" });
          const { ResourceProperties } = event;
          const { DomainName, NameServers } = ResourceProperties;

          try {
            if (event.RequestType === "Create" || event.RequestType === "Update") {
              const command = new UpdateDomainNameserversCommand({
                DomainName,
                Nameservers: NameServers.map(Name => ({ Name })),
              });
              await client.send(command);
              return await sendResponse(
                event,
                context,
                "SUCCESS",
                { NameServers },
                DomainName,
              );
            } else if (event.RequestType === "Delete") {
              return await sendResponse(event, context, "SUCCESS");
            } else {
              throw new Error(`Invalid RequestType: ${event.RequestType}`);
            }
          } catch (error) {
            console.error(error);
            return await sendResponse(event, context, "FAILED", {});
          }
        };

  Route53Dns:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt: Route53DnsFunction.Arn
      DomainName:
        Ref: DomainName
      NameServers:
        Fn::GetAtt: HostedZone.NameServers

  UserPoolClientSecretFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-UserPoolClientSecretFunctionPolicy-${AWS::Region}
      Description: Policy for UserPoolClientSecretFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CognitoIdpAccessPermissions
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource: "*"
          - Sid: CloudWatchLogsAccessPermissions
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - Fn::Sub: ${UserPoolClientSecretFunctionLogGroup.Arn}

  UserPoolClientSecretFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-UserPoolClientSecretFunctionRole-${AWS::Region}
      Description: Service role for UserPoolClientSecretFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: UserPoolClientSecretFunctionPolicy

  UserPoolClientSecretFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-UserPoolClientSecretFunction

  UserPoolClientSecretFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-UserPoolClientSecretFunction
      Description: Route 53 DNS config function
      Role:
        Fn::GetAtt: UserPoolClientSecretFunctionRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs20.x
      Handler: index.handler
      Timeout: 30
      LoggingConfig:
        LogGroup:
          Ref: UserPoolClientSecretFunctionLogGroup
      InlineCode: |
        const https = require("node:https");
        const {
          CognitoIdentityProviderClient,
          DescribeUserPoolClientCommand,
        } = require("@aws-sdk/client-cognito-identity-provider");

        const serialize = obj => JSON.stringify(obj, null, 2);

        const sendResponse = async (
          event,
          context,
          status,
          data,
          physicalResourceId,
          noEcho,
        ) => {
          const { StackId, RequestId, LogicalResourceId, ResponseURL } = event;
          const body = serialize({
            Status: status,
            Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
            PhysicalResourceId: physicalResourceId || context.logStreamName,
            Data: data,
            StackId,
            RequestId,
            LogicalResourceId,
            NoEcho: noEcho || false,
          });

          const { hostname, pathname, search } = new URL(ResponseURL);
          const path = `${pathname}${search}`;
          const headers = {
            "Content-Type": "application/json",
            "Content-Length": body.length,
          };

          return await new Promise((resolve, reject) => {
            const req = https.request(
              { hostname, port: 443, path, method: "PUT", headers },
              res => {
                const chunks = [];
                res.on("data", chunk => {
                  chunks.push(chunk);
                });
                res.on("error", error => {
                  reject(error.message);
                });
                res.on("end", () => {
                  const data = Buffer.concat(chunks);
                  resolve(data);
                });
              },
            );
            req.on("error", e => {
              reject(e.message);
            });
            req.write(body);
            req.end();
          });
        };

        exports.handler = async (event, context) => {
          console.log(serialize(event));
          const client = new CognitoIdentityProviderClient();
          const { ResourceProperties } = event;
          const { UserPoolId, ClientId } = ResourceProperties;

          try {
            if (event.RequestType === "Create" || event.RequestType === "Update") {
              const command = new DescribeUserPoolClientCommand({
                UserPoolId,
                ClientId,
              });
              const { UserPoolClient } = await client.send(command);
              const ClientSecret = UserPoolClient?.ClientSecret ?? "";
              return await sendResponse(
                event,
                context,
                "SUCCESS",
                { ClientSecret },
                ClientId,
              );
            } else if (event.RequestType === "Delete") {
              return await sendResponse(event, context, "SUCCESS");
            } else {
              throw new Error(`Invalid RequestType: ${event.RequestType}`);
            }
          } catch (error) {
            console.error(error);
            return await sendResponse(event, context, "FAILED", {});
          }
        };

  UserPoolClientSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt: UserPoolClientSecretFunction.Arn
      UserPoolId:
        Ref: UserPool
      ClientId:
        Ref: UserPoolClient

Outputs:
  UserPoolClientId:
    Description: User pool client ID
    Value:
      Ref: UserPoolClient

  UserPoolDomainUrl:
    Description: User pool domain URL
    Value:
      Fn::Sub: https://${UserPoolDomainPrefix}.auth.${AWS::Region}.amazoncognito.com

  ALBUrl:
    Description: ALB domain name
    Value:
      Fn::Sub: https://${ALBDomainName}

  UserPoolClientSecret:
    Description: User pool client secret
    Value:
      Fn::GetAtt: UserPoolClientSecret.ClientSecret
