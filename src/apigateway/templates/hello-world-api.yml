# apigateway/templates/hello-world-api.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Hello World API

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            get:
              operationId: HelloWorld
              tags:
                - HelloWorld
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/HelloWorldResponse"
                      examples:
                        example1:
                          value:
                            message: Hello World!
                  headers:
                    Access-Control-Allow-Origin:
                      description: Response header for CORS support
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
                httpMethod: POST
        components:
          schemas:
            HelloWorldResponse:
              description: Response body for GET /
              type: object
              required:
                - message
              properties:
                message:
                  type: string

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionRole-${AWS::Region}
      Description: Service role for LambdaFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-LambdaFunction
      Description: HelloWorld function
      Role:
        Fn::GetAtt: LambdaFunctionRole.Arn
      Runtime: nodejs18.x
      Handler: index.handler
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /
            RestApiId:
              Ref: RestApi
      InlineCode: |
        exports.handler = async () => {
          const body = { message: "Hello World!" };
          const response = {
            statusCode: 200,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: JSON.stringify(body, null, 2),
          };
          return response;
        };

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${LambdaFunction}

Outputs:
  RestApiUrl:
    Description: REST API URL
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}
