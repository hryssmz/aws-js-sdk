# apigateway/templates/lambda-proxy-api.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda proxy API stack

Resources:
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionExecutionRole-${AWS::Region}
      Description: Execution role for Lambda Function
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GreetingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          "use strict";
          console.log("Loading hello world function");

          exports.handler = async event => {
            let name = "you";
            let city = "World";
            let time = "day";
            let day = "";
            let responseCode = 200;
            console.log("request: " + JSON.stringify(event));

            if (event.queryStringParameters && event.queryStringParameters.name) {
              console.log("Received name: " + event.queryStringParameters.name);
              name = event.queryStringParameters.name;
            }

            if (event.queryStringParameters && event.queryStringParameters.city) {
              console.log("Received city: " + event.queryStringParameters.city);
              city = event.queryStringParameters.city;
            }

            if (event.headers && event.headers["day"]) {
              console.log("Received day: " + event.headers.day);
              day = event.headers.day;
            }

            if (event.body) {
              let body = JSON.parse(event.body);
              if (body.time) time = body.time;
            }

            let greeting = `Good ${time}, ${name} of ${city}.`;
            if (day) greeting += ` Happy ${day}!`;

            let responseBody = {
              message: greeting,
              input: event,
            };

            // The output from a Lambda proxy integration must be
            // in the following JSON object. The 'headers' property
            // is for custom response headers in addition to standard
            // ones. The 'body' property must be a JSON string. For
            // base64-encoded payload, you must also set the 'isBase64Encoded'
            // property to 'true'.
            let response = {
              statusCode: responseCode,
              headers: {
                "x-custom-header": "my custom header value",
              },
              body: JSON.stringify(responseBody),
            };
            console.log("response: " + JSON.stringify(response));
            return response;
          };
      Description: Greeting Function
      Handler: index.handler
      Role:
        Fn::GetAtt: LambdaFunctionExecutionRole.Arn
      Runtime: nodejs16.x

  GreetingFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GreetingFunction
      Principal: apigateway.amazonaws.com

  LambdaProxyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Lambda Proxy API
      EndpointConfiguration:
        Types: [REGIONAL]
      Name: LambdaProxyApi

  HelloworldResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt: LambdaProxyApi.RootResourceId
      PathPart: helloworld
      RestApiId:
        Ref: LambdaProxyApi

  AnyHelloworldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GreetingFunction.Arn}/invocations
      OperationName: AnyHelloworld
      ResourceId:
        Ref: HelloworldResource
      RestApiId:
        Ref: LambdaProxyApi

  LambdaProxyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AnyHelloworldMethod
    Properties:
      Description: Lambda Proxy API deployment
      RestApiId:
        Ref: LambdaProxyApi
      StageDescription:
        Description: Lambda Proxy API test stage
      StageName: test

Outputs:
  LambdaProxyApiTestUrl:
    Value:
      Fn::Sub: https://${LambdaProxyApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/test
