# sqs/templates/first-queue.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: My first queue

Resources:
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${AWS::StackName}-Queue

  ProducerFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-ProducerFunctionPolicy-${AWS::Region}
      Description: Policy for ProducerFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - Fn::GetAtt: Queue.Arn

  ProducerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ProducerFunctionRole-${AWS::Region}
      Description: Service role for ProducerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ProducerFunctionPolicy

  ProducerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ProducerFunction

  ProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ProducerFunction
      Description: Push messages into Queue
      Role:
        Fn::GetAtt: ProducerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ProducerFunctionLogGroup
      Environment:
        Variables:
          QUEUE_URL:
            Ref: Queue
      InlineCode: |
        const { SendMessageCommand, SQSClient } = require("@aws-sdk/client-sqs");

        exports.handler = async () => {
          const client = new SQSClient();
          const message = new Date().toISOString();
          const command = new SendMessageCommand({
            MessageBody: message,
            QueueUrl: process.env.QUEUE_URL,
          });
          const { MessageId, SequenceNumber } = await client.send(command);
          const result = { MessageId, SequenceNumber };
          console.log(JSON.stringify(result, null, 2));
          return result;
        };

  ConsumerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionRole-${AWS::Region}
      Description: Service role for ConsumerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ConsumerFunction

  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunction
      Description: Consumer function for Queue
      Role:
        Fn::GetAtt: ConsumerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ConsumerFunctionLogGroup
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt: Queue.Arn
      InlineCode: |
        exports.handler = async event => {
          const { Records } = event;
          const messages = Records.map(({ body }) => body);
          console.log(JSON.stringify(messages, null, 2));
          return messages;
        };
