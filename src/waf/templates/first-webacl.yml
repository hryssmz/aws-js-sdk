# waf/templates/first-webacl.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Getting started with AWS WAF

Resources:
  # REST API
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            post:
              responses:
                "200":
                  description: 200 OK
                "500":
                  description: 500 Internal Server Error
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode": 200 }'
                responses:
                  "2\\d{2}":
                    statusCode: 200
                    responseTemplates:
                      application/json: '{ "message": "OK" }'
                  default:
                    statusCode: 500
                    responseTemplates:
                      application/json: '{ "message": "Internal Server Error" }'
                passthroughBehavior: when_no_match

  # WAF
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-WebACL
      Description: My REST API Web ACL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName:
          Fn::Sub: ${AWS::StackName}-WebACL
      Scope: REGIONAL
      CustomResponseBodies:
        Forbidden:
          ContentType: APPLICATION_JSON
          Content: |
            { "message": "403 Forbidden" }
      Rules:
        - Name:
            Fn::Sub: ${AWS::StackName}-WebACL-Rule1
          Priority: 1
          Action:
            Block:
              CustomResponse:
                ResponseCode: 403
                CustomResponseBodyKey: Forbidden
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: ${AWS::StackName}-WebACL-Rule1
          Statement:
            ByteMatchStatement:
              FieldToMatch:
                SingleHeader:
                  Name: User-Agent
              PositionalConstraint: EXACTLY
              SearchString: BotAgent
              TextTransformations:
                - Priority: 0
                  Type: NONE
        - Name:
            Fn::Sub: ${AWS::StackName}-WebACL-Rule2
          Priority: 2
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: ${AWS::StackName}-WebACL-Rule2
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesUnixRuleSet
              VendorName: AWS
        - Name:
            Fn::Sub: ${AWS::StackName}-WebACL-Rule3
          Priority: 3
          Action:
            Block:
              CustomResponse:
                ResponseCode: 403
                CustomResponseBodyKey: Forbidden
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: ${AWS::StackName}-WebACL-Rule3
          Statement:
            LabelMatchStatement:
              Scope: NAMESPACE
              Key: "awswaf:managed:aws:posix-os:"

  WebACLRestApiAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/${RestApi.Stage}
      WebACLArn:
        Fn::GetAtt: WebACL.Arn

Outputs:
  RestApiUrl:
    Description: REST API URL
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}

  CurlCommand1:
    Description: Sample curl command 1
    Value:
      Fn::Sub: >
        curl -isSL -X POST -H "User-Agent: BotAgent" -d '{"statusCode": 200, "command": "echo Hello World"}' https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}

  CurlCommand2:
    Description: Sample curl command 2
    Value:
      Fn::Sub: >
        curl -isSL -X POST -d '{"statusCode": 200, "command": "echo $PATH"}' https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}
