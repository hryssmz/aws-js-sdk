# ssm/templates/events-automation.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: My Automation runbook triggered by EventBridge

Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

Resources:
  # SSM
  ApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${AWS::StackName}/ApiKeyParameter
      Description: API key SSM parameter
      Type: String
      Value: keyboard cat

  RunbookDocumentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-RunbookDocumentRole-${AWS::Region}
      Description: Service role for RunbookDocument
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount:
                  Ref: AWS::AccountId
              ArnLike:
                aws:SourceArn:
                  Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-execution/*
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole

  RunbookDocument:
    Type: AWS::SSM::Document
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RunbookDocument
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /
      UpdateMethod: NewVersion
      Content:
        schemaVersion: "0.3"
        description: My first Automation runbook
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          AutomationAssumeRole:
            type: AWS::IAM::Role::Arn
            description: Role to execute this runbook
            default:
              Fn::GetAtt: RunbookDocumentRole.Arn
          ApiKey:
            type: String
            description: API key
            default:
              Fn::Sub: "{{ ssm:${ApiKeyParameter} }}"
        mainSteps:
          - name: InvokeLambdaFunction
            action: aws:invokeLambdaFunction
            description: Invoke custom Lambda function
            timeoutSeconds: 30
            inputs:
              FunctionName:
                Ref: LambdaFunction
              InputPayload:
                apiKey: "{{ ApiKey }}"
                executionId: "{{ automation:EXECUTION_ID }}"
            isEnd: true

  # Lambda
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-LambdaFunctionRole-${AWS::Region}
      Description: Service role for LambdaFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: Automation-${AWS::StackName}-LambdaFunction
      Description: Lambda function
      Role:
        Fn::GetAtt: LambdaFunctionRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Timeout: 30
      InlineCode: |
        exports.handler = async event => {
          console.log(`event: ${JSON.stringify(event, null, 2)}`);
          return { message: "Hello World!" };
        };

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${LambdaFunction}

  # EC2
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Ref: EventBridgeRulePolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      Tags:
        - Key: Name
          Value: EC2Instance

  # EventBridge
  EventBridgeRulePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-EventBridgeRulePolicy-${AWS::Region}
      Description: Policy for EventBridge rule
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:StartAutomationExecution
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${RunbookDocument}:$DEFAULT
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - Fn::GetAtt: RunbookDocumentRole.Arn
            Condition:
              StringLikeIfExists:
                iam:PassedToService: ssm.amazonaws.com

  EventBridgeRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EventBridgeRuleRole-${AWS::Region}
      Description: Service role for EventBridge rule
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: EventBridgeRulePolicy

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-EventBridgeRule
      Description: EventBridge rule
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          instance-id:
            - Ref: EC2Instance
          state:
            - pending
            - stopping
      Targets:
        - Id:
            Ref: RunbookDocument
          Arn:
            Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${RunbookDocument}:$DEFAULT
          RoleArn:
            Fn::GetAtt: EventBridgeRuleRole.Arn
        - Id:
            Ref: SubscriberFunction
          Arn:
            Fn::GetAtt: SubscriberFunction.Arn

  SubscriberFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SubscriberFunctionRole-${AWS::Region}
      Description: Service role for SubscriberFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SubscriberFunction
      Description: Subscriber function for the Event
      Role:
        Fn::GetAtt: SubscriberFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      InlineCode: |
        exports.handler = async event => {
          console.log(JSON.stringify(event, null, 2));
        };

  SubscriberFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SubscriberFunction}

  SubscriberFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SubscriberFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: EventBridgeRule.Arn
