# ssm/templates/command-document.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Command-type document

Parameters:
  DesiredCapacity:
    Type: Number
    Default: 2
    MinValue: 0
    MaxValue: 5
    ConstraintDescription: must be an integer between 0 and 5

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 image ID
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro

Resources:
  # EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-EC2SecurityGroup
      GroupDescription: EC2 security group
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /usr/local/bin/get-metadata.sh:
              content: |
                #!/bin/sh
                TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
                curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/$1
              mode: "000755"
            /etc/systemd/system/cfn-hup.service:
              content:
                Fn::Sub: |
                  [Unit]
                  Description=cfn-hup service
                  After=network.target

                  [Service]
                  Type=simple
                  User=root
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  RestartSec=3

                  [Install]
                  WantedBy=multi-user.target
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-EC2LaunchTemplate
      VersionDescription: Launch template for EC2 instances
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: EC2LaunchTemplate
      LaunchTemplateData:
        ImageId:
          Ref: ImageId
        InstanceType:
          Ref: InstanceType
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        SecurityGroupIds:
          - Ref: EC2SecurityGroup
        Monitoring:
          Enabled: false
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: EC2Instance
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              dnf update -y
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchTemplate --region ${AWS::Region}
              systemctl enable cfn-hup.service
              systemctl start cfn-hup.service
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource AutoScalingGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count:
          Ref: DesiredCapacity
        Timeout: PT4M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 2
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        PauseTime: PT4M
        WaitOnResourceSignals: true
    Properties:
      AutoScalingGroupName:
        Fn::Sub: ${AWS::StackName}-AutoScalingGroup
      MinSize: 0
      MaxSize: 3
      DesiredCapacity:
        Ref: DesiredCapacity
      DesiredCapacityType: units
      DefaultInstanceWarmup: 120
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2
      VPCZoneIdentifier:
        Ref: SubnetIds
      LaunchTemplate:
        LaunchTemplateId:
          Ref: EC2LaunchTemplate
        Version:
          Fn::GetAtt: EC2LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: AutoScalingGroup
          PropagateAtLaunch: false

  # SSM
  CommandDocument:
    Type: AWS::SSM::Document
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-CommandDocument
      DocumentType: Command
      DocumentFormat: YAML
      TargetType: /
      UpdateMethod: NewVersion
      Content:
        schemaVersion: "2.2"
        description: My first Command-type document
        mainSteps:
          - name: GetInstanceId
            action: aws:runShellScript
            inputs:
              runCommand:
                - get-metadata.sh instance-id
              timeoutSeconds: "30"

  CommandDocumentAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName:
        Fn::Sub: ${AWS::StackName}-CommandDocumentAssociation
      Name:
        Ref: CommandDocument
      ScheduleExpression: rate(30 minutes)
      WaitForSuccessTimeoutSeconds: 120
      Targets:
        - Key: tag:Name
          Values:
            - EC2Instance
