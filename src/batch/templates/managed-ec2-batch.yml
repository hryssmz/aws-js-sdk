# ecs/templates/managed-ec2-batch.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Managed On-Demand EC2 batch

Parameters:
  VPCCidr:
    Type: String
    Description: VPC CIDR
    Default: 172.20.0.0/16

  SubnetCidrs:
    Type: CommaDelimitedList
    Description: Subnet CIDRs
    Default: 172.20.0.0/20,172.20.16.0/20

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Ref: SubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet0

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Ref: SubnetCidrs
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet1

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: RouteTable

  Subnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet0
      RouteTableId:
        Ref: RouteTable

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  # EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-EC2SecurityGroup
      GroupDescription: EC2 instance security group
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonECS_FullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  # Batch
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName:
        Fn::Sub: ${AWS::StackName}-ComputeEnvironment2
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Type: EC2
        Ec2Configuration:
          - ImageType: ECS_AL2
        InstanceRole:
          Ref: EC2InstanceProfile
        InstanceTypes:
          - m5a.large
        SecurityGroupIds:
          - Ref: EC2SecurityGroup
        Subnets:
          - Ref: Subnet0
          - Ref: Subnet1
        MinvCpus: 0
        MaxvCpus: 2
        Tags:
          Name: EC2Instance

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName:
        Fn::Sub: ${AWS::StackName}-JobQueue
      State: ENABLED
      Priority: 0
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Ref: ComputeEnvironment
          Order: 1

  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-BatchExecutionRole-${AWS::Region}
      Description: Service role for ECS container agents
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  BatchJobPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-BatchJobPolicy-${AWS::Region}
      Description: Execution policy for batch job
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"

  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-BatchJobRole-${AWS::Region}
      Description: Service role for batch job
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: BatchJobPolicy

  BatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/batch/${AWS::StackName}-BatchLogGroup

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName:
        Fn::Sub: ${AWS::StackName}-JobDefinition
      Type: container
      PlatformCapabilities:
        - EC2
      SchedulingPriority: 0
      Timeout:
        AttemptDurationSeconds: 60
      ContainerProperties:
        Command:
          - /bin/sh
          - -c
          - python --version && curl -sSL ifconfig.me
        Image: python:3
        ExecutionRoleArn:
          Fn::GetAtt: BatchExecutionRole.Arn
        JobRoleArn:
          Fn::GetAtt: BatchJobRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: BatchLogGroup
        ResourceRequirements:
          - Type: MEMORY
            Value: 2048
          - Type: VCPU
            Value: 1
