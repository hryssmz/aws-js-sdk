# eventbridge/templates/scheduled-job.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Scheduled batch job

Parameters:
  CidrIp:
    Type: String
    Description: CIDR IP address
    Default: 0.0.0.0/0
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid CIDR of the form x.x.x.x/0

Mappings:
  Region2DefaultVPC:
    ap-northeast-1:
      VPC: vpc-01d5cfd2cad5314f1
      Subnet: subnet-00ee516fa04d610fe
      Subnet2: subnet-0c99e2001f0ae6c0a
      Subnet3: subnet-0deeda0e1c6cd4ffa
      SecurityGroup: sg-061a6a1270b7720d1

Resources:
  # AWS Batch
  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-BatchExecutionRole-${AWS::Region}
      Description: Service role for ECS container agents
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  BatchJobPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-BatchJobPolicy-${AWS::Region}
      Description: Execution policy for batch job
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"

  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-BatchJobRole-${AWS::Region}
      Description: Service role for batch job
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: BatchJobPolicy

  BatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/batch/${AWS::StackName}-BatchLogGroup

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName:
        Fn::Sub: ${AWS::StackName}-ComputeEnvironment
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 1
        SecurityGroupIds:
          - Fn::FindInMap:
              - Region2DefaultVPC
              - Ref: AWS::Region
              - SecurityGroup
        Subnets:
          - Fn::FindInMap:
              - Region2DefaultVPC
              - Ref: AWS::Region
              - Subnet
          - Fn::FindInMap:
              - Region2DefaultVPC
              - Ref: AWS::Region
              - Subnet2

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName:
        Fn::Sub: ${AWS::StackName}-JobQueue
      State: ENABLED
      Priority: 0
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Ref: ComputeEnvironment
          Order: 1

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName:
        Fn::Sub: ${AWS::StackName}-JobDefinition
      Type: container
      PlatformCapabilities:
        - FARGATE
      SchedulingPriority: 0
      Timeout:
        AttemptDurationSeconds: 60
      ContainerProperties:
        Command:
          - /bin/sh
          - -c
          - dnf install -y aws-cli; aws s3 ls
        Image: amazonlinux:2023
        ExecutionRoleArn:
          Fn::GetAtt: BatchExecutionRole.Arn
        JobRoleArn:
          Fn::GetAtt: BatchJobRole.Arn
        FargatePlatformConfiguration:
          PlatformVersion: LATEST
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: BatchLogGroup
        ResourceRequirements:
          - Type: MEMORY
            Value: 512
          - Type: VCPU
            Value: 0.25

  # EventBridge
  BatchScheduledRulePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-BatchScheduledRulePolicy-${AWS::Region}
      Description: Execution policy for batch scheduled rule
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - batch:SubmitJob
            Resource:
              - Ref: JobQueue
              - Ref: JobDefinition

  BatchScheduledRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-BatchScheduledRuleRole-${AWS::Region}
      Description: Service role for batch scheduled rule
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: BatchScheduledRulePolicy

  BatchScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-BatchScheduledRule
      Description: Batch scheduled rule
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Id:
            Fn::Sub: ${AWS::StackName}-JobQueue
          Arn:
            Ref: JobQueue
          RoleArn:
            Fn::GetAtt: BatchScheduledRuleRole.Arn
          BatchParameters:
            JobDefinition:
              Ref: JobDefinition
            JobName:
              Fn::Sub: ${AWS::StackName}-Job
