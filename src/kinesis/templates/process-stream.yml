# kinesis/templates/process-stream.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Process stream

Resources:
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-KinesisStream
      ShardCount: 1
      StreamModeDetails:
        StreamMode: PROVISIONED

  ProducerFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-ProducerFunctionPolicy-${AWS::Region}
      Description: Policy for ProducerFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecords
            Resource:
              - Fn::GetAtt: KinesisStream.Arn

  ProducerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ProducerFunctionRole-${AWS::Region}
      Description: Service role for ProducerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ProducerFunctionPolicy

  ProducerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ProducerFunction

  ProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ProducerFunction
      Description: Producer function
      Role:
        Fn::GetAtt: ProducerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ProducerFunctionLogGroup
      Environment:
        Variables:
          STREAM_NAME:
            Ref: KinesisStream
      InlineCode: |
        const { KinesisClient, PutRecordsCommand } = require("@aws-sdk/client-kinesis");

        exports.handler = async () => {
          const client = new KinesisClient();
          const records = Array(5)
            .fill(0)
            .map((_, i) => i + Math.floor(Number(new Date()) / 1000))
            .map(i => ({ partitionKey: `${i % 2}`, data: `${i}` }));

          const command = new PutRecordsCommand({
            StreamName: process.env.STREAM_NAME,
            Records: records.map(({ partitionKey, data }) => ({
              PartitionKey: partitionKey,
              Data: Buffer.from(data, "utf8"),
            })),
          });
          const { Records = [] } = await client.send(command);
          const result = Records.map(({ ShardId, SequenceNumber }) => ({
            ShardId,
            SequenceNumber,
          }));
          console.log(JSON.stringify(result, null, 2));
          return result;
        };

  ConsumerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionRole-${AWS::Region}
      Description: Service role for ConsumerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ConsumerFunction

  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunction
      Description: Consumer function
      Role:
        Fn::GetAtt: ConsumerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ConsumerFunctionLogGroup
      Events:
        KinesisEvent:
          Type: Kinesis
          Properties:
            Stream:
              Fn::GetAtt: KinesisStream.Arn
            StartingPosition: LATEST
            BatchSize: 3
      InlineCode: |
        exports.handler = async event => {
          const records = event.Records.map(({ kinesis }) => kinesis).map(
            ({ partitionKey, data }) => ({
              partitionKey,
              data: Buffer.from(data, "base64").toString(),
            })
          );
          console.log(JSON.stringify(records, null, 2));
          return records;
        };
