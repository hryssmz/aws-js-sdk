# dynamodb/templates/ddb-global-table.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: DynamoDB table with replicas

Resources:
  GlobalTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-GlobalTable
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      WriteProvisionedThroughputSettings:
        WriteCapacityAutoScalingSettings:
          MinCapacity: 1
          MaxCapacity: 5
          SeedCapacity: 1
          TargetTrackingScalingPolicyConfiguration:
            TargetValue: 80
      Replicas:
        - Region: ap-northeast-1
          ReadProvisionedThroughputSettings:
            ReadCapacityAutoScalingSettings:
              MinCapacity: 1
              MaxCapacity: 5
              SeedCapacity: 1
              TargetTrackingScalingPolicyConfiguration:
                TargetValue: 80
        - Region: us-east-1
          ReadProvisionedThroughputSettings:
            ReadCapacityAutoScalingSettings:
              MinCapacity: 1
              MaxCapacity: 5
              SeedCapacity: 1
              TargetTrackingScalingPolicyConfiguration:
                TargetValue: 80

  ConsumerFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionPolicy-${AWS::Region}
      Description: Policy for ConsumerFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:DescribeStream
              - dynamodb:ListShards
            Resource:
              - Fn::GetAtt: GlobalTable.StreamArn
          - Effect: Allow
            Action:
              - dynamodb:ListStreams
            Resource: "*"

  ConsumerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunctionRole-${AWS::Region}
      Description: Service role for ConsumerFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: ConsumerFunctionPolicy

  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ConsumerFunction
      Description: Consumer function
      Role:
        Fn::GetAtt: ConsumerFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt: GlobalTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 3
      InlineCode: |
        exports.handler = async event => {
          const records = event.Records.map(({ dynamodb }) => dynamodb);
          console.log(JSON.stringify(records, null, 2));
          return records;
        };

  ConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ConsumerFunction}

  PutItemFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-PutItemFunctionPolicy-${AWS::Region}
      Description: Policy for PutItemFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - Fn::GetAtt: GlobalTable.Arn

  PutItemFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-PutItemFunctionRole-${AWS::Region}
      Description: Service role for PutItemFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: PutItemFunctionPolicy

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PutItemFunction
      Description: Producer function
      Role:
        Fn::GetAtt: PutItemFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TABLE_NAME:
            Ref: GlobalTable
      InlineCode: |
        const { randomUUID } = require("crypto");
        const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
        const { DynamoDBDocumentClient, PutCommand } = require("@aws-sdk/lib-dynamodb");

        exports.handler = async () => {
          const client = DynamoDBDocumentClient.from(new DynamoDBClient());
          const command = new PutCommand({
            TableName: process.env.TABLE_NAME,
            Item: { Id: randomUUID() },
          });
          const { Attributes } = await client.send(command);
          return Attributes;
        };

  PutItemFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${PutItemFunction}
