# eks/templates/eks-managed-node.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Amazon EKS sample cluster with EC2 nodes

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

  DeployEKSCluster:
    Type: String
    Description: Deploy EKS cluster
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be a boolean value

  PublicAccessCidrs:
    Type: CommaDelimitedList
    Description: Public access CIDRs for EKS cluster
    Default: 0.0.0.0/0

Conditions:
  DeployEKSClusterCondition:
    Fn::Equals:
      - Ref: DeployEKSCluster
      - true

Resources:
  # Lambda resources
  EKSManifestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EKSManifestFunctionRole-${AWS::Region}
      Description: Service role for EKSManifestFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  EKSManifestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-EKSManifestFunction

  EKSManifestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-EKSManifestFunction
      Description: My simple Lambda function
      Role:
        Fn::GetAtt: EKSManifestFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          EKS_MANIFEST_CONTENT:
            Fn::Sub: |
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: ${AWS::StackName}
                labels:
                  app.kubernetes.io/name: ${AWS::StackName}
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app.kubernetes.io/name: ${AWS::StackName}
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: ${AWS::StackName}
                  spec:
                    containers:
                      - name: nginx
                        image: public.ecr.aws/nginx/nginx:1.23
                        ports:
                          - name: http
                            containerPort: 80
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: ${AWS::StackName}
                labels:
                  app.kubernetes.io/name: ${AWS::StackName}
              spec:
                selector:
                  app.kubernetes.io/name: ${AWS::StackName}
                ports:
                  - protocol: TCP
                    port: 80
                    targetPort: 80
      LoggingConfig:
        LogGroup:
          Ref: EKSManifestFunctionLogGroup
      FunctionUrlConfig:
        AuthType: NONE
      InlineCode: |
        exports.handler = async event => {
          console.log(JSON.stringify(event, null, 2));
          return {
            statusCode: 200,
            body: process.env.EKS_MANIFEST_CONTENT,
            headers: { "Content-Type": "application/yaml" },
          };
        };

  # EKS resources
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-EKSSecurityGroup
      GroupDescription: EKS security group
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: EKSSecurityGroup

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EKSClusterRole-${AWS::Region}
      Description: Service role for EKS cluster
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: eks.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Condition: DeployEKSClusterCondition
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-EKSCluster
      RoleArn:
        Fn::GetAtt: EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          Ref: SubnetIds
        SecurityGroupIds:
          - Ref: EKSSecurityGroup
        PublicAccessCidrs:
          Ref: PublicAccessCidrs
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP

  EKSManagedNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EKSManagedNodeRole-${AWS::Region}
      Description: Service role for EKS managed node
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ec2.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EKSNodegroup:
    Type: AWS::EKS::Nodegroup
    Condition: DeployEKSClusterCondition
    Properties:
      NodegroupName:
        Fn::Sub: ${AWS::StackName}-EKSNodegroup
      ClusterName:
        Ref: EKSCluster
      NodeRole:
        Fn::GetAtt: EKSManagedNodeRole.Arn
      AmiType: AL2023_x86_64_STANDARD
      CapacityType: ON_DEMAND
      InstanceTypes:
        - t3.small
      Subnets:
        Ref: SubnetIds

Outputs:
  UpdateKubeconfigCommand:
    Condition: DeployEKSClusterCondition
    Description: eks update-kubeconfig command
    Value:
      Fn::Sub: aws eks update-kubeconfig --region ${AWS::Region} --name ${EKSCluster}

  ApplyManifestCommand:
    Description: Apply kubernetes manifest command
    Value:
      Fn::Sub: kubectl apply -f ${EKSManifestFunctionUrl.FunctionUrl}

  KubectlExecCommand:
    Description: kubectl exec command
    Value:
      Fn::Sub: POD_NAME=`kubectl get pods -l app=${AWS::StackName} -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | head -n1`; [ -n "$POD_NAME" ] && kubectl exec -it $POD_NAME -- bash || kubectl get pods -l app=${AWS::StackName}
