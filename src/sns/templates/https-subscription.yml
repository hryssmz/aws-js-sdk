# sns/templates/https-subscription.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Topic with HTTPS subscription

Resources:
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-Topic

  SenderFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-SenderFunctionPolicy-${AWS::Region}
      Description: Policy for SenderFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - Ref: Topic

  SenderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SenderFunctionRole-${AWS::Region}
      Description: Service role for SenderFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: SenderFunctionPolicy

  SenderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-SenderFunction

  SenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SenderFunction
      Description: Sender function for the topic
      Role:
        Fn::GetAtt: SenderFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: SenderFunctionLogGroup
      Environment:
        Variables:
          TOPIC_ARN:
            Ref: Topic
      InlineCode: |
        const { PublishCommand, SNSClient } = require("@aws-sdk/client-sns");

        exports.handler = async () => {
          const client = new SNSClient();
          const subject = "Datetime";
          const message = new Date().toISOString();
          const command = new PublishCommand({
            Message: message,
            Subject: subject,
            TopicArn: process.env.TOPIC_ARN,
          });
          const { MessageId, SequenceNumber } = await client.send(command);
          const result = { MessageId, SequenceNumber };
          console.log(JSON.stringify(result, null, 2));
          return result;
        };

  ReceiverFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ReceiverFunctionRole-${AWS::Region}
      Description: Service role for ReceiverFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ReceiverFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-ReceiverFunction

  ReceiverFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ReceiverFunction
      Description: Receiver function for the topic
      Role:
        Fn::GetAtt: ReceiverFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: ReceiverFunctionLogGroup
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: Topic
      InlineCode: |
        exports.handler = async event => {
          const { Records } = event;
          const messages = Records.map(({ Sns }) => Sns).map(({ Message }) => Message);
          messages.forEach(message => {
            console.log(message);
          });
          return messages;
        };

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            post:
              operationId: PostRoot
              tags:
                - PostRoot
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/PostRootResponse"
                      examples:
                        example1:
                          value:
                            message: Hello World!
                  headers:
                    Access-Control-Allow-Origin:
                      description: Response header for CORS support
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRootFunction.Arn}/invocations
                httpMethod: POST
        components:
          schemas:
            PostRootResponse:
              description: Response body for GET /
              type: object
              required:
                - message
              properties:
                message:
                  type: string

  PostRootFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-PostRootFunctionRole-${AWS::Region}
      Description: Service role for PostRootFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  PostRootFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-PostRootFunction

  PostRootFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PostRootFunction
      Description: PostRoot function
      Role:
        Fn::GetAtt: PostRootFunctionRole.Arn
      Runtime: nodejs18.x
      Handler: index.handler
      Architectures:
        - arm64
      LoggingConfig:
        LogGroup:
          Ref: PostRootFunctionLogGroup
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /
            RestApiId:
              Ref: RestApi
      InlineCode: |
        const https = require("https");

        exports.handler = async event => {
          const { Type, Message, SubscribeURL } = JSON.parse(event.body);
          if (Type === "SubscriptionConfirmation") {
            await new Promise((resolve, reject) => {
              const req = https.get(SubscribeURL, res => {
                res.on("data", chunk => {
                  const body = chunk.toString();
                  console.log(body);
                  resolve(body);
                });
              });
              req.on("error", error => {
                console.error(error.message);
                reject(error.message);
              });
              req.end();
            });
          } else {
            console.log(Message);
          }

          return {
            statusCode: 200,
            body: JSON.stringify({ message: "Hello World!" }, null, 2),
          };
        };

  RestApiTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: https
      TopicArn:
        Ref: Topic
      Endpoint:
        Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${RestApi.Stage}
