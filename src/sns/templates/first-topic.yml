# sns/templates/first-topic.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: My first topic

Resources:
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-Topic

  SenderFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-SenderFunctionPolicy-${AWS::Region}
      Description: Policy for SenderFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - Ref: Topic

  SenderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-SenderFunctionRole-${AWS::Region}
      Description: Service role for SenderFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: SenderFunctionPolicy

  SenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-SenderFunction
      Description: Sender function for the topic
      Role:
        Fn::GetAtt: SenderFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TOPIC_ARN:
            Ref: Topic
      InlineCode: |
        const { PublishCommand, SNSClient } = require("@aws-sdk/client-sns");

        exports.handler = async () => {
          const client = new SNSClient();
          const subject = "Datetime";
          const message = new Date().toISOString();
          const command = new PublishCommand({
            Message: message,
            Subject: subject,
            TopicArn: process.env.TOPIC_ARN,
          });
          const { MessageId, SequenceNumber } = await client.send(command);
          const result = { MessageId, SequenceNumber };
          console.log(JSON.stringify(result, null, 2));
          return result;
        };

  SenderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SenderFunction}

  ReceiverFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ReceiverFunctionRole-${AWS::Region}
      Description: Service role for ReceiverFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ReceiverFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ReceiverFunction
      Description: Receiver function for the topic
      Role:
        Fn::GetAtt: ReceiverFunctionRole.Arn
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: Topic
      InlineCode: |
        exports.handler = async event => {
          const { Records } = event;
          const messages = Records.map(({ Sns }) => Sns).map(({ Message }) => Message);
          messages.forEach(message => {
            console.log(message);
          });
          return messages;
        };

  ReceiverFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ReceiverFunction}
