# elb/templates/first-alb.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: My first application load balancer

Parameters:
  PublicKeyBody:
    Type: String
    Description: EC2 public key
    AllowedPattern: ssh-rsa .*
    ConstraintDescription: must be a valid RSA public key

  MyIP:
    Type: String
    Description: My IP address
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
    ConstraintDescription: must be a valid IP address of the form x.x.x.x

Mappings:
  RegionProfile2AMI:
    ap-northeast-1:
      AL2023: ami-067871d950411e643
      EB: ami-0b2ac252459e06dd1

  RegionProfile2Type:
    ap-northeast-1:
      AL2023: t2.micro
      EB: t2.micro

Resources:
  SSHKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Sub: ${AWS::StackName}-SSHKeyPair
      PublicKeyMaterial:
        Ref: PublicKeyBody

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.16.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.32.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet2

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.48.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet3

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: RouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable

  WebPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName:
        Fn::Sub: ${AWS::StackName}-WebPrefixList
      MaxEntries: 2
      AddressFamily: IPv4
      Entries:
        - Cidr:
            Fn::Sub: ${MyIP}/32
          Description: My IP
        - Cidr:
            Fn::GetAtt: VPC.CidrBlock
          Description: Internal CIDR
      Tags:
        - Key: Name
          Value: WebPrefixList

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-WebSecurityGroup
      GroupDescription: Web security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            Ref: WebPrefixList
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8002
          SourcePrefixListId:
            Ref: WebPrefixList
      Tags:
        - Key: Name
          Value: WebSecurityGroup

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-SshSecurityGroup
      GroupDescription: SSH security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::Sub: ${MyIP}/32
      Tags:
        - Key: Name
          Value: SshSecurityGroup

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceRole-${AWS::Region}
      Description: Service role for EC2 instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: ${AWS::StackName}-EC2InstanceProfile-${AWS::Region}
      Roles:
        - Ref: EC2InstanceRole

  AL2023LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-AL2023LaunchTemplate
      VersionDescription: Launch template for AL2023 instances
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: AL2023LaunchTemplate
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
            - RegionProfile2AMI
            - Ref: AWS::Region
            - AL2023
        InstanceType:
          Fn::FindInMap:
            - RegionProfile2Type
            - Ref: AWS::Region
            - AL2023
        KeyName:
          Ref: SSHKeyPair
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            SubnetId:
              Ref: Subnet
            Groups:
              - Ref: SshSecurityGroup
              - Ref: WebSecurityGroup
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: AL2023Instance
        UserData:
          Fn::Base64: |
            #!/bin/sh
            dnf update -y
            dnf install -y httpd wget php-fpm php-mysqli php-json php php-devel
            dnf install -y mariadb105-server
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            echo "<h1>Hello World</h1>" > /var/www/html/index.html
            TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
            INSTANCE_ID=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id`
            echo "<p>Instance ID: $INSTANCE_ID</p>" >> /var/www/html/index.html
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

  AL2023Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: AL2023LaunchTemplate
        Version:
          Fn::GetAtt: AL2023LaunchTemplate.LatestVersionNumber

  AL2023Instance2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: AL2023LaunchTemplate
        Version:
          Fn::GetAtt: AL2023LaunchTemplate.LatestVersionNumber

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALB
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - Ref: WebSecurityGroup
      Subnets:
        - Ref: Subnet
        - Ref: Subnet2
        - Ref: Subnet3

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-TargetGroup
      TargetType: instance
      IpAddressType: ipv4
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Port: 80
      VpcId:
        Ref: VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Targets:
        - Id:
            Ref: AL2023Instance
          Port: 80
        - Id:
            Ref: AL2023Instance2
          Port: 80
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup

  RedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 8001
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: "www.youtube.com"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_302

  FixedResponseListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 8002
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Not Found
            StatusCode: 404

Outputs:
  ALBDNSName:
    Value:
      Fn::GetAtt: ALB.DNSName
