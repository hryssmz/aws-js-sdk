# s3/templates/s3-object-lambda.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: S3 object Lambda

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-s3bucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-s3accesspoint
      Bucket:
        Ref: S3Bucket

  S3ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-s3objectlambdaaccesspoint
      ObjectLambdaConfiguration:
        SupportingAccessPoint:
          Fn::GetAtt: S3AccessPoint.Arn
        TransformationConfigurations:
          - Actions:
              - GetObject
            ContentTransformation:
              AwsLambda:
                FunctionArn:
                  Fn::GetAtt: TransformFunction.Arn

  TransformFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-TransformFunction

  TransformFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-TransformFunction
      Description: Transform function
      Handler: index.lambda_handler
      Runtime: python3.9
      Architectures:
        - arm64
      Policies:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy
      LoggingConfig:
        LogGroup:
          Ref: TransformFunctionLogGroup
      InlineCode: |
        from http.client import HTTPResponse
        from typing import Any
        from urllib.request import urlopen

        import boto3
        from botocore.config import Config


        def lambda_handler(event: dict[str, Any], context: Any) -> dict[str, Any]:
            object_context: dict[str, str] = event["getObjectContext"]

            # Get the presigned URL to fetch the requested original object from S3
            s3_url = object_context["inputS3Url"]

            # Extract the route and request token from the input context
            request_route = object_context["outputRoute"]
            request_token = object_context["outputToken"]

            # Get the original S3 object using the presigned URL
            response: HTTPResponse = urlopen(s3_url)
            original_object = response.fp.read().decode("utf-8")

            # Transform all text in the original object to uppercase
            # You can replace it with your custom code based on your use case
            transformed_object = original_object.upper()

            # Write object back to S3 Object Lambda
            s3 = boto3.client("s3", config=Config(signature_version="s3v4"))

            # The WriteGetObjectResponse API sends the transformed data
            # back to S3 Object Lambda and then to the user
            s3.write_get_object_response(
                Body=transformed_object,
                RequestRoute=request_route,
                RequestToken=request_token,
            )

            # Exit the Lambda function: return the status code
            return {"statusCode": 200}
