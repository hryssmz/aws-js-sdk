# ecs/templates/sample-fargate.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Sample Fargate

Parameters:
  MyIP:
    Type: String
    Description: My IPv4 address
    Default: 116.64.133.211
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
    ConstraintDescription: must be a valid IP address of the form x.x.x.x

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      Tags:
        - Key: Name
          Value: CustomVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CustomInternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.0.0/20
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CustomSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: CustomRouteTable

  SubnetRouteTableTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-WebSecurityGroup
      GroupDescription: Web security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::Sub: ${MyIP}/32
      Tags:
        - Key: Name
          Value: CustomSecurityGroup

  ECSNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ECSNamespace
      Description: Custom ECS namespace

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${AWS::StackName}-ECSLogGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace:
          Fn::GetAtt: ECSNamespace.Arn

  ECSTasksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSTasksServiceRole
      Description: Service role for ECS tasks
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: ${AWS::StackName}-TaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ExecutionRoleArn:
        Fn::GetAtt: ECSTasksServiceRole.Arn
      ContainerDefinitions:
        - Name:
            Fn::Sub: ${AWS::StackName}-httpd
          Image: httpd:latest
          Command:
            - /bin/sh
            - -c
            - "echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p> </div></body></html>' > /usr/local/apache2/htdocs/index.html && httpd-foreground"
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix:
                Fn::Sub: ${AWS::StackName}-TaskDefinition

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName:
        Fn::Sub: ${AWS::StackName}-ECSService
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Ref: TaskDefinition
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: WebSecurityGroup
          Subnets:
            - Ref: Subnet
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
