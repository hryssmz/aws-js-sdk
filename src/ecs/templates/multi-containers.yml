# ecs/templates/multi-containers.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS task with multiple containers

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

  DesiredCount:
    Type: Number
    Description: Desired task count for ECS service
    Default: 1
    MinValue: 0
    MaxValue: 5
    ConstraintDescription: Must be an integer between 0 and 5

Resources:
  # ECS
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ECSSecurityGroup
      GroupDescription: ECS task security group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ECSSecurityGroup

  ECSNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ECSNamespace
      Description: ECS namespace

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: NONE
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace:
          Fn::GetAtt: ECSNamespace.Arn

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSExecutionRole-${AWS::Region}
      Description: Service role for ECS container agents
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ecs-tasks.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSTaskRole-${AWS::Region}
      Description: Service role for ECS containers
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                Fn::Sub: ecs-tasks.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      ManagedPolicyArns: []

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${AWS::StackName}-ECSLogGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: ${AWS::StackName}-TaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ExecutionRoleArn:
        Fn::GetAtt: ECSExecutionRole.Arn
      TaskRoleArn:
        Fn::GetAtt: ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: httpd
          Image: httpd:latest
          Command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > /usr/local/apache2/htdocs/index.html
              <h1>It works!</h1>
              <p>Your container hostname is `hostname`.</p>
              EOF

              sed -i \
                  -e 's/^#\(LoadModule .*mod_proxy_http.so\)/\1/' \
                  -e 's/^#\(LoadModule .*mod_proxy.so\)/\1/' \
                  conf/httpd.conf

              cat <<\EOF >> conf/httpd.conf
              <IfModule proxy_module>
              Include conf/extra/proxy.conf
              </IfModule>
              EOF

              cat <<\EOF >> conf/extra/proxy.conf
              ProxyPass "/proxy" "http://localhost:3000/"
              ProxyPassReverse "/proxy" "http://localhost:3000/"
              EOF

              apt update -y && apt install -y curl
              httpd-foreground
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: httpd
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost || exit 1
            StartPeriod: 30
        - Name: node
          Image: node:latest
          Command:
            - /bin/sh
            - -c
            - |
              cat <<\EOF > main.js
              const http = require("http");

              const hostname = "0.0.0.0";
              const port = 3000;

              const server = http.createServer((req, res) => {
                res.statusCode = 200;
                res.setHeader("Content-Type", "text/html");
                res.end("<h1>Hello World!</h1>\n");
              });

              server.listen(port, hostname, () => {
                console.log(`Server running at http://${hostname}:${port}/`);
              });
              EOF

              node main.js
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: node
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000 || exit 1
            StartPeriod: 30

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName:
        Fn::Sub: ${AWS::StackName}-ECSService
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Ref: TaskDefinition
      LaunchType: FARGATE
      DesiredCount:
        Ref: DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: ECSSecurityGroup
          Subnets:
            Ref: SubnetIds
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
