# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template that represents a load balanced web service on Amazon ECS.
Metadata:
  Manifest: |
    # The manifest for the "api" service.
    # Read the full specification for the "Load Balanced Web Service" type at:
    # https://aws.github.io/copilot-cli/docs/manifest/lb-web-service/

    # Your service name will be used in naming your resources like log groups, ECS services, etc.
    name: api
    type: Load Balanced Web Service

    # Distribute traffic to your service.
    http:
      # Requests to this path will be forwarded to your service.
      # To match all requests you can use the "/" path.
      path: "/"
      # You can specify a custom health check path. The default is "/".
      #healthcheck: "/"
      
    # Configuration for your containers and service.
    image:
      # Docker build arguments. For additional overrides: https://aws.github.io/copilot-cli/docs/manifest/lb-web-service/#image-build
      build: Dockerfile
      # Port exposed through your container to route traffic to it.
      port: 80
      
    cpu: 256       # Number of CPU units for the task.
    memory: 512    # Amount of memory in MiB used by the task.
    count: 1       # Number of tasks that should be running in your service.
    exec: true     # Enable running commands in your container.
    network:
      connect: true # Enable Service Connect for intra-environment traffic between services.
      
    #storage:
    #  readonly_fs: true       # Limit to read-only access to mounted root filesystems.
      
    # Optional fields for more advanced use-cases.
    #
    #variables:                    # Pass environment variables as key value pairs.
    #  LOG_LEVEL: info

    #secrets:                      # Pass secrets from AWS Systems Manager (SSM) Parameter Store.
    #  GITHUB_TOKEN: GITHUB_TOKEN  # The key is the name of the environment variable, the value is the name of the SSM parameter.

    # You can override any of the values defined above by environment.
    #environments:
    #  test:
    #    count: 2               # Number of tasks to run for the "test" environment.
    #    deployment:            # The deployment strategy for the "test" environment.
    #       rolling: "recreate" # Stops existing tasks before new ones are started for faster deployments.

Parameters:
  AppName:
    Type: String

  EnvName:
    Type: String

  WorkloadName:
    Type: String

  ContainerImage:
    Type: String

  ContainerPort:
    Type: Number

  TaskCPU:
    Type: String

  TaskMemory:
    Type: String

  TaskCount:
    Type: Number

  DNSDelegated:
    Type: String
    AllowedValues:
      - true
      - false

  LogRetention:
    Type: Number

  AddonsTemplateURL:
    Description: URL of the addons nested stack template within the S3 bucket.
    Type: String
    Default: ""

  EnvFileARN:
    Description: URL of the environment file.
    Type: String
    Default: ""

  TargetContainer:
    Type: String

  TargetPort:
    Type: Number

  HTTPSEnabled:
    Type: String
      - true
      - false

  RulePath:
    Type: String

  Stickiness:
    Type: String
    Default: false

Conditions:
  IsGovCloud:
    Fn::Equals:
      - Ref: AWS::Partition
      - aws-us-gov

  IsDefaultRootPath:
    Fn::Equals:
      - Ref: RulePath
      - /

  HasAssociatedDomain:
    Fn::Equals:
      - Ref: DNSDelegated
      - true

  HasAddons:
    Fn::Not:
      - Fn::Equals:
          - Ref: AddonsTemplateURL
          - ""

  HasEnvFile:
    Fn::Not:
      - Fn::Equals:
          - Ref: EnvFileARN
          - ""

Resources: # If a bucket URL is specified, that means the template exists.
  LogGroup:
    Metadata:
      aws:copilot:description: A CloudWatch log group to hold your service logs
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /copilot/${AppName}-${EnvName}-${WorkloadName}
      RetentionInDays:
        Ref: LogRetention

  TaskDefinition:
    Metadata:
      aws:copilot:description: An ECS task definition to group your containers and run them on ECS
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family:
        Fn::Sub: ${AppName}-${EnvName}-${WorkloadName}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu:
        Ref: TaskCPU
      Memory:
        Ref: TaskMemory
      ExecutionRoleArn:
        Fn::GetAtt: ExecutionRole.Arn
      TaskRoleArn:
        Fn::GetAtt: TaskRole.Arn
      ContainerDefinitions:
        - Name:
            Ref: WorkloadName
          Image:
            Ref: ContainerImage
          Environment:
            - Name: COPILOT_APPLICATION_NAME
              Value:
                Ref: AppName
            - Name: COPILOT_SERVICE_DISCOVERY_ENDPOINT
              Value: test.demo.local
            - Name: COPILOT_ENVIRONMENT_NAME
              Value:
                Ref: EnvName
            - Name: COPILOT_SERVICE_NAME
              Value:
                Ref: WorkloadName
            - Name: COPILOT_LB_DNS
              Value:
                Fn::GetAtt: EnvControllerAction.PublicLoadBalancerDNSName
          EnvironmentFiles:
            - Fn::If:
                - HasEnvFile
                - Type: s3
                  Value:
                    Ref: EnvFileARN
                - Ref: AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: LogGroup
              awslogs-stream-prefix: copilot
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
              Name: target

  ExecutionRole:
    Metadata:
      aws:copilot:description: An IAM Role for the Fargate agent to make AWS API calls on your behalf
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: ${AppName}-${EnvName}-${WorkloadName}SecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                Condition:
                  StringEquals:
                    ssm:ResourceTag/copilot-application:
                      Ref: AppName
                    ssm:ResourceTag/copilot-environment:
                      Ref: EnvName
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
                Condition:
                  StringEquals:
                    secretsmanager:ResourceTag/copilot-application:
                      Ref: AppName
                    secretsmanager:ResourceTag/copilot-environment:
                      Ref: EnvName
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
        - Fn::If:
            # Optional IAM permission required by ECS task def env file
            # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html#taskdef-envfiles-iam
            # Example EnvFileARN: arn:aws:s3:::stackset-demo-infrastruc-pipelinebuiltartifactbuc-11dj7ctf52wyf/manual/1638391936/env
            - HasEnvFile
            - PolicyName:
                Fn::Sub: ${AppName}-${EnvName}-${WorkloadName}GetEnvFilePolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:GetObject
                    Resource:
                      - Ref: EnvFileARN
                  - Effect: Allow
                    Action:
                      - s3:GetBucketLocation
                    Resource:
                      - Fn::Sub:
                          - arn:${AWS::Partition}:s3:::${BucketName}
                          - BucketName:
                              Fn::Select:
                                - 0
                                - Fn::Split:
                                    - /
                                    - Fn::Select:
                                        - 5
                                        - Fn::Split:
                                            - ":"
                                            - Ref: EnvFileARN
            - Ref: AWS::NoValue
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Metadata:
      aws:copilot:description: An IAM role to control permissions for the containers in your tasks
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DenyIAMExceptTaggedRoles
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Deny
                Action: iam:*
                Resource: "*"
              - Effect: Allow
                Action: sts:AssumeRole
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
                Condition:
                  StringEquals:
                    iam:ResourceTag/copilot-application:
                      Ref: AppName
                    iam:ResourceTag/copilot-environment:
                      Ref: EnvName
        - PolicyName: ExecuteCommand
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

  DiscoveryService:
    Metadata:
      aws:copilot:description: Service discovery for your services to communicate within the VPC
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Copilot services
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
          - TTL: 10
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name:
        Ref: WorkloadName
      NamespaceId:
        Fn::ImportValue:
          Fn::Sub: ${AppName}-${EnvName}-ServiceDiscoveryNamespaceID

  EnvControllerAction:
    Metadata:
      aws:copilot:description: Update your environment's shared resources
    Type: Custom::EnvControllerFunction
    Properties:
      ServiceToken:
        Fn::GetAtt: EnvControllerFunction.Arn
      Workload:
        Ref: WorkloadName
      EnvStack:
        Fn::Sub: ${AppName}-${EnvName}
      Parameters:
        - ALBWorkloads
        - Aliases
      EnvVersion: v1.13.0

  EnvControllerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: stackset-demo-infrastruc-pipelinebuiltartifactbuc-zyaxibsf4ndm
        S3Key: manual/scripts/custom-resources/envcontrollerfunction/3ffcf03598029891816b7ce2d1ff14fdd8079af4406a0cfeff1d4aa0109dcd7d.zip
      Handler: index.handler
      Timeout: 900
      MemorySize: 512
      Role:
        Fn::GetAtt: EnvControllerRole.Arn
      Runtime: nodejs16.x

  EnvControllerRole:
    Metadata:
      aws:copilot:description: An IAM role to update your environment stack
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EnvControllerStackUpdate
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}-${EnvName}/*
                Condition:
                  StringEquals:
                    cloudformation:ResourceTag/copilot-application:
                      Ref: AppName
                    cloudformation:ResourceTag/copilot-environment:
                      Ref: EnvName
        - PolicyName: EnvControllerRolePass
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AppName}-${EnvName}-CFNExecutionRole
                Condition:
                  StringEquals:
                    iam:ResourceTag/copilot-application:
                      Ref: AppName
                    iam:ResourceTag/copilot-environment:
                      Ref: EnvName
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Service:
    Metadata:
      aws:copilot:description: An ECS service to run and maintain your tasks in the environment cluster
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListenerRule
    Properties:
      PlatformVersion: LATEST
      Cluster:
        Fn::ImportValue:
          Fn::Sub: ${AppName}-${EnvName}-ClusterId
      TaskDefinition:
        Ref: TaskDefinition
      DesiredCount:
        Ref: TaskCount
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      PropagateTags: SERVICE
      EnableExecuteCommand: true
      LaunchType: FARGATE
      ServiceConnectConfiguration:
        Enabled: True
        Namespace: test.demo.local
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region:
              Ref: AWS::Region
            awslogs-group:
              Ref: LogGroup
            awslogs-stream-prefix: copilot
        Services:
          - PortName: target
            # Avoid using the same service with Service Discovery in a namespace.
            DiscoveryName:
              Fn::Sub: ${WorkloadName}-sc
            ClientAliases:
              - Port:
                  Ref: TargetPort
                DnsName:
                  Ref: WorkloadName
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  Fn::Sub: ${AppName}-${EnvName}-PublicSubnets
          SecurityGroups:
            - Fn::ImportValue:
                Fn::Sub: ${AppName}-${EnvName}-EnvironmentSecurityGroup
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName:
            Ref: TargetContainer
          ContainerPort:
            Ref: TargetPort
          TargetGroupArn:
            Ref: TargetGroup
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt: DiscoveryService.Arn
          Port:
            Ref: TargetPort

  TargetGroup:
    Metadata:
      aws:copilot:description: A target group to connect the load balancer to your service
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: / # Default is '/'.
      Port:
        Ref: TargetPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # ECS Default is 300; Copilot default is 60.
        - Key: stickiness.enabled
          Value:
            Ref: Stickiness
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${AppName}-${EnvName}-VpcId

  RulePriorityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: stackset-demo-infrastruc-pipelinebuiltartifactbuc-zyaxibsf4ndm
        S3Key: manual/scripts/custom-resources/rulepriorityfunction/584fba94a6e8a3ba8893428c31648e101fb8bf840647ce0b4505ffc86088ab50.zip
      Handler: index.nextAvailableRulePriorityHandler
      Timeout: 600
      MemorySize: 512
      Role:
        Fn::GetAtt: RulePriorityFunctionRole.Arn
      Runtime: nodejs16.x

  RulePriorityFunctionRole:
    Metadata:
      aws:copilot:description: An IAM Role to describe load balancer rules for assigning a priority
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RulePriorityGeneratorAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeRules
                Resource: "*"

  HTTPRulePriorityAction:
    Metadata:
      aws:copilot:description: A custom resource assigning priority for HTTP listener rules
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken:
        Fn::GetAtt: RulePriorityFunction.Arn
      RulePath:
        Ref: RulePath
      ListenerArn:
        Fn::GetAtt: EnvControllerAction.HTTPListenerArn

  HTTPListenerRule:
    Metadata:
      aws:copilot:description: A HTTP listener rule for forwarding HTTP traffic
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      Conditions:
        - Field: "path-pattern"
          PathPatternConfig:
            Values:
              Fn::If:
                - IsDefaultRootPath
                - - "/*"
                - - Fn::Sub: "/${RulePath}"
                  - Fn::Sub: "/${RulePath}/*"
      ListenerArn:
        Fn::GetAtt: EnvControllerAction.HTTPListenerArn
      Priority:
        Fn::GetAtt: HTTPRulePriorityAction.Priority

  AddonsStack:
    Metadata:
      aws:copilot:description: An Addons CloudFormation Stack for your additional AWS resources
    Type: AWS::CloudFormation::Stack
    DependsOn: EnvControllerAction
    Condition: HasAddons
    Properties:
      Parameters:
        App:
          Ref: AppName
        Env:
          Ref: EnvName
        Name:
          Ref: WorkloadName
      TemplateURL:
        Ref: AddonsTemplateURL

Outputs:
  DiscoveryServiceARN:
    Description: ARN of the Discovery Service.
    Value:
      Fn::GetAtt: DiscoveryService.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DiscoveryServiceARN
