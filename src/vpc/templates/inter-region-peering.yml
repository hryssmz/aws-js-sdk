# vpc/templates/inter-region-peering.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Create with VPCs in the same account and different Regions

Parameters:
  SshCidrIp:
    Type: String
    Description: SSH CIDR IP block
    AllowedPattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}
    ConstraintDescription: must be a valid CIDR block of the form x.x.x.x/x

  PublicKeyBody:
    Type: String
    Description: EC2 public key
    AllowedPattern: ssh-rsa .*
    ConstraintDescription: must be a valid RSA public key

  AccepterVpcId:
    Type: String
    Description: Accepter VPC ID
    Default: "vpc-0cd97ec55ae07d764"

  PeeringConnectionId:
    Type: String
    Description: Peering connection ID
    Default: "pcx-04cfbc0b94e313a75"

Mappings:
  RegionProfile2AMI:
    ap-northeast-1:
      AL2023: ami-067871d950411e643

    us-east-1:
      AL2023: ami-04a0ae173da5807d3

  RegionProfile2Type:
    ap-northeast-1:
      AL2023: t2.micro

    us-east-1:
      AL2023: t2.micro

  Region2Cidr:
    ap-northeast-1:
      VPC: 172.20.0.0/17
      Subnet: 172.20.0.0/20
      PrivateSubnet: 172.20.64.0/20
      PeeringVPC: 172.20.128.0/17

    us-east-1:
      VPC: 172.20.128.0/17
      Subnet: 172.20.128.0/20
      PrivateSubnet: 172.20.192.0/20
      PeeringVPC: 172.20.0.0/17

Rules:
  TestTokyoOrVirginia:
    Assertions:
      - AssertDescription: Only ap-northeast-1 and us-east-1 are allowed
        Assert:
          Fn::Contains:
            - - ap-northeast-1
              - us-east-1
            - Ref: AWS::Region

Conditions:
  IsAccepterCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - ap-northeast-1

  IsRequesterCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - us-east-1

  HasAccepterVpcIdCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: AccepterVpcId
          - ""

  HasPeeringConnectionId:
    Fn::Not:
      - Fn::Equals:
          - Ref: PeeringConnectionId
          - ""

  CreateVPCPeeringCondition:
    Fn::And:
      - Condition: IsRequesterCondition
      - Condition: HasAccepterVpcIdCondition

  CreatePeeringRouteCondition:
    Fn::Or:
      - Fn::And:
          - Condition: IsAccepterCondition
          - Condition: HasPeeringConnectionId
      - Fn::And:
          - Condition: IsRequesterCondition
          - Condition: HasPeeringConnectionId

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - Region2Cidr
          - Ref: AWS::Region
          - VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - Region2Cidr
          - Ref: AWS::Region
          - Subnet
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: RouteTable

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - Region2Cidr
          - Ref: AWS::Region
          - PrivateSubnet
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: PrivateSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

  # VPC Peering
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: CreateVPCPeeringCondition
    Properties:
      VpcId:
        Ref: VPC
      PeerRegion: ap-northeast-1
      PeerVpcId:
        Ref: AccepterVpcId
      Tags:
        - Key: Name
          Value: VPCPeeringConnection

  PeeringRoute:
    Type: AWS::EC2::Route
    Condition: CreatePeeringRouteCondition
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock:
        Fn::FindInMap:
          - Region2Cidr
          - Ref: AWS::Region
          - PeeringVPC
      VpcPeeringConnectionId:
        Ref: PeeringConnectionId

  # EC2
  SSHKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Sub: ${AWS::StackName}-SSHKeyPair
      PublicKeyMaterial:
        Ref: PublicKeyBody

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-BastionSecurityGroup
      GroupDescription: Bastion instances security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SshCidrIp
      Tags:
        - Key: Name
          Value: BastionSecurityGroup

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-PrivateSecurityGroup
      GroupDescription: Private instances security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::FindInMap:
              - Region2Cidr
              - Ref: AWS::Region
              - PeeringVPC
      Tags:
        - Key: Name
          Value: PrivateSecurityGroup

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionProfile2AMI
          - Ref: AWS::Region
          - AL2023
      InstanceType:
        Fn::FindInMap:
          - RegionProfile2Type
          - Ref: AWS::Region
          - AL2023
      KeyName:
        Ref: SSHKeyPair
      SecurityGroupIds:
        - Ref: BastionSecurityGroup
      SubnetId:
        Ref: Subnet
      Tags:
        - Key: Name
          Value: BastionInstance

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionProfile2AMI
          - Ref: AWS::Region
          - AL2023
      InstanceType:
        Fn::FindInMap:
          - RegionProfile2Type
          - Ref: AWS::Region
          - AL2023
      KeyName:
        Ref: SSHKeyPair
      SecurityGroupIds:
        - Ref: PrivateSecurityGroup
      SubnetId:
        Ref: PrivateSubnet
      Tags:
        - Key: Name
          Value: PrivateInstance

Outputs:
  VpcId:
    Description: VPC ID
    Value:
      Ref: VPC

  PeeringConnectionId:
    Condition: CreateVPCPeeringCondition
    Description: Peering connection ID
    Value:
      Ref: VPCPeeringConnection
