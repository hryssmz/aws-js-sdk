# codepipeline/templates/ecs-sample.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS sample

Parameters:
  ContainerName:
    Type: String
    Description: Container name
    Default: app

  DesiredCount:
    Type: Number
    Description: Desired ECS task count
    Default: 1
    MinValue: 0
    MaxValue: 5
    ConstraintDescription: Must be an integer between 0 and 5

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    Default: vpc-01d5cfd2cad5314f1

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs
    Default: subnet-00ee516fa04d610fe,subnet-0c99e2001f0ae6c0a

Resources:
  # Elastic Load Balancing
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ALBSecurityGroup
      GroupDescription: ALB security group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTP inbound rule 2
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALB
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Subnets:
        Ref: SubnetIds

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALBTargetGroup
      TargetType: ip
      IpAddressType: ipv4
      Protocol: HTTP
      Port: 80
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10

  ALBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ALBTargetGroup2
      TargetType: ip
      IpAddressType: ipv4
      Protocol: HTTP
      Port: 80
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ALBTargetGroup2
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup

  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-TargetSecurityGroup
      GroupDescription: Target security group
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: TargetSecurityGroup

  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTP outbound rule
      GroupId:
        Ref: ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId:
        Ref: TargetSecurityGroup

  TargetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP inbound rule
      GroupId:
        Ref: TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: ALBSecurityGroup

  # ECS
  ECSNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ECSNamespace
      Description: ECS namespace

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace:
          Fn::GetAtt: ECSNamespace.Arn

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-ECSExecutionRole-${AWS::Region}
      Description: Service role for ECS container agents
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${AWS::StackName}-ECSLogGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: ${AWS::StackName}-TaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ExecutionRoleArn:
        Fn::GetAtt: ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name:
            Ref: ContainerName
          Image: httpd:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: TaskDefinition
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost || exit 1
          Command:
            - /bin/sh
            - -c
            - |
              cat <<EOF > /usr/local/apache2/htdocs/index.html
              <html>
                <head>
                  <title>Amazon ECS Sample App</title>
                  <style>
                    body {
                      margin-top: 40px;
                      background-color: #333;
                    }
                    .container {
                      color: white;
                      text-align: center;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <h1>Amazon ECS Sample App</h1>
                    <h2>Congratulations!</h2>
                    <p>
                      Your application is now running on a container in Amazon ECS.
                    </p>
                    <p>
                      Your container hostname is `hostname`
                    </p>
                  </div>
                </body>
              </html>
              EOF

              apt update -y && apt install -y curl
              httpd-foreground

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName:
        Fn::Sub: ${AWS::StackName}-ECSService
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Fn::Sub: arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${AWS::StackName}-TaskDefinition:1
      DesiredCount:
        Ref: DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: TargetSecurityGroup
          Subnets:
            Ref: SubnetIds
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - ContainerName:
            Ref: ContainerName
          ContainerPort: 80
          TargetGroupArn:
            Ref: ALBTargetGroup
      HealthCheckGracePeriodSeconds: 60
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA

  # CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-CodeDeployServiceRole-${AWS::Region}
      Description: Service role for AWS CodeDeploy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AWSCodeDeployRoleForECS

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName:
        Ref: AWS::StackName
      ComputePlatform: ECS

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: CodeDeployApplication
      DeploymentGroupName:
        Fn::Sub: ${AWS::StackName}-DeploymentGroup
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 1
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name:
                  Fn::GetAtt: ALBTargetGroup.TargetGroupName
              - Name:
                  Fn::GetAtt: ALBTargetGroup2.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - Ref: ALBListener
      ECSServices:
        - ServiceName:
            Fn::GetAtt: ECSService.Name
          ClusterName:
            Ref: ECSCluster
      ServiceRoleArn:
        Fn::GetAtt: CodeDeployServiceRole.Arn

Outputs:
  ALBDNSName:
    Description: ALB domain name
    Value:
      Fn::GetAtt: ALB.DNSName

  TaskDefinition:
    Description: ARN of the task definition
    Value:
      Ref: TaskDefinition

  ContainerName:
    Description: Container name
    Value:
      Ref: ContainerName
